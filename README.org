#+STARTUP: all
#+DATE: Time-stamp: <2020-03-19>
#+bind: org-html-preamble-format (("en" "%d"))
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:t creator:t d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:t f:t inline:t num:t p:nil pri:nil prop:nil
#+OPTIONS: stat:t tags:t tasks:t tex:t timestamp:t toc:t todo:t |:t
#+AUTHOR: H. Dieter Wilhelm
#+EMAIL: dieter@duenenhof-wilhelm.de
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

#+OPTIONS: html-link-use-abs-url:nil html-postamble:t html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+HTML_LINK_HOME: https://github.com/dieter-wilhelm/apdl-mode
#+HTML_LINK_UP: index.html
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+HTML_MATHJAX:
#+INFOJS_OPT:
#+LATEX_HEADER:

#+title: APDL-Mode
The GNU-Emacs major mode for the programming language APDL

[[https://stable.melpa.org/#/apdl-mode][file:https://stable.melpa.org/packages/apdl-mode-badge.svg]]
[[https://melpa.org/#/apdl-mode][file:https://melpa.org/packages/apdl-mode-badge.svg]]

Copyright (C) 2006 - 2020  H. Dieter Wilhelm, GPL V3

[[file:doc/ansys+emacs2020-03.png]]

* Introduction
  APDL ([[https://de.wikipedia.org/wiki/Ansys_Parametric_Design_Language][Ansys Parametric Design Language]]) is the solver scripting
  language of the mechanical FEA (Finite Element Analysis) suite [[http://www.ansys.com][Ansys]]
  (ANalysis SYStem, registered TM).

  APDL-Mode (formerly Ansys-Mode) is - in conjunction with the
  [[https://www.gnu.org/software/emacs/][GNU-Emacs]] editor - an advanced APDL environment with features like,
  pin-pointing the APDL reference documentation, keyword completion,
  code templates, dedicated highlighting, solver communication
  (GNU-Linux only), license reporting, etc.  Over the years it has
  accumulated lots of features for writing and debugging FEA complete
  models in APDL code. Please convince yourself with the APDL-Mode
  in-depth documentation.

  With the advent of the modern Ansys GUIs - like `WorkBench' or
  `Discovery AIM' - the usage of APDL as a wholesale modelling
  language has diminished for non automated tasks.  But APDL is here
  to stay: `WorkBench' and `AIM' operate exclusively the Ansys solver
  with it!  They are producing and sending APDL input (.dat) files to
  the solver.  For a true understanding of the GUIs' inner workings a
  study of their APDL code is prerequisite!  Moreover, the GUIs are
  not supporting all solver features.  So "Command (APDL)" snippets
  are used to enhance the GUIs' modelling capabilities.

  Nowadays I find APDL-Mode mostly useful for studying solver (.dat)
  files which were created by WorkBench.  And, especially, for writing
  WorkBench `Command' snippets and inspecting longer snippets from
  other sources.  Accessing swiftly the Ansys APDL reference
  documentation alone is worth using APDL-Mode!

  When you "Export" (or "Import") such a WorkBench Command (APDL)
  object it becomes associated with a file and is editable with a
  third party editor.

  [[file:doc/connect_command_snippet_to_file.png]]

  When you have modified the file then the "File Status" in Workbench
  changes and you can pull-in the updated content with the "Refresh"
  button.

* Some Highlights
** In-built APDL command help with argument counter
   Especially for commands with a large number of arguments it is
   cumbersome to count the arguments, *C-?* facilitates this for you
   and visualises dynamically at which parameter position your cursor
   currently is.

   [[file:doc/parameter_help2.png]]

** Pin-pointing the relevant Ansys documentation
   You can trigger (*C-c C-b*) the relevant Ansys manual entry
   directly from your APDL-Mode session without the detour of
   searching in the Ansys online help (default since V19).  This works
   not only for APDL commands but also element names and other manual
   topics. (To that end you must have started / registered the Ansys
   online help once from an Ansys product.  But I recommend installing
   the Ansys documentation locally, loading is much faster.)

   The image below is showing a manual entry in GNU-Emacs's EWW
   browser. You are able to consult the manual side-by-side with your
   APDL code.

   # #+caption: Browsing the manual in a web browser (here with EWW in GNU-Emacs).
   [[file:doc/browse_manual.png]]

** Code outlining for inspecting WorkBench solver (.dat) files
   APDL-Mode hides the normally uninteresting but usually very large
   number blocks.
   #+ATTR_LaTeX: :height 7.5cm
   [[file:doc/hidden_blocks.png]]

   The image below shows the unhidden content.
   #+ATTR_LaTeX: :height 7.5cm
   [[file:doc/unhidden_blocks.png]]
** Command Snippet Templates and Code Highlighting Example
   The image shows GNU-Emacs with a ripped off APDL-Mode menu field,
   the APDL variable buffer, the APDL file itself and an APDL template
   preview.  You are able to compile your most often used WorkBench /
   Discovery AIM Command snippets and have them all immediately
   available for inspection and inclusion.

   [[file:doc/ansys-mode.jpg]]
* Installation
  Please install [[https://www.gnu.org/software/emacs/][GNU-Emacs]] first, you should install at least Emacs
  version 25.1.  (If you are new to this editor please check the
  tutorial in its `Help' menu, please really do it ;-)
** Melpa
   APDL-Mode is now available on the GNU-Emacs packages archive [[https://melpa.org/][Melpa]].

   [[https://stable.melpa.org/#/apdl-mode][file:https://stable.melpa.org/packages/apdl-mode-badge.svg]]
   [[https://melpa.org/#/apdl-mode][file:https://melpa.org/packages/apdl-mode-badge.svg]]

   Please add
   #+begin_src elisp
   (add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/") t)
   #+end_src

   to your initialisation file.  Then type: `M-x list-packages', find
   `apdl-mode', mark it with `i' and install it with `x'.

   If you prefer the stable package archive instead of development
   versions exchange above package source with
   #+begin_src elisp
      (add-to-list 'package-archives
      '("melpa-stable" . "https://stable.melpa.org/packages/") t)
   #+end_src

** Manual installation
   If you are behind a corporate firewall and you are not able to
   install APDL-Mode from Emacs' package menu, you can download and
   install APDL-Mode manually:

   - Download the latest APDL-Mode's tar package from [[https://melpa.org/#/apdl-mode][Melpa]] or - for a
     released package - from the [[https://github.com/dieter-wilhelm/apdl-mode/releases/tag/20.1.0][Github]] release page.
   - Install the package within Emacs: Please type `M-x
     package-install-file <RET>' and select your downloaded tar file.

   That's it.

   *Hint:* If you are getting an error message "package.el is not yet
   initialized", you are using Emacs' packaging system for the very
   first time.  It is necessary to initialise this machinery once,
   please type: `M-: (package-initialize) <RET>' and then apply `M-x
   package-install-file <RET>' again.

** Development and source code installation
   Please clone the APDL-Mode git archive in a directory of your
   choice:
   #+begin_src sh
     git clone https://github.com/dieter-wilhelm/apdl-mode.git
   #+end_src
   or download the Github ZIP archive and add the following line
   #+begin_src elisp
   (require 'apdl-mode)
   #+end_src
   to your initialisation file (the source directory must be set in
   the `load-path' variable as well).
* Usage
  Please type `M-x apdl' which opens a buffer in APDL-Mode and you can
  inspect the menu bar's `APDL' and `MAPDL' entries.  For existing
  APDL files please type `M-x apdl-mode' to start this mode (or
  configure Emacs to auto-load it for certain file suffixes, please
  see the following section).

  For further guidance please select `Describe APDL-Mode' (or type
  `C-h m'), which will display the mode's help.  You might also check
  the introductory APDL-Mode tutorial ([[file:doc/A-M_introductory_tutorial.org][A-M_introductory_tutorial.org]]).

  APDL-Mode is tested with Ansys v193 and v201 under Windows 10, as
  well as under Emacs-25 and 26 under GNU-Linux and Windows.

  The complete documentation of APDL-Mode is available [[http://dieter-wilhelm.github.io/apdl-mode][online]].
* Configuration and Customisation
  Most functionality of APDL-Mode is working without additional
  configurations.  APDL-Mode is intelligent enough to figure out Ansys
  installation dependent paths (for regular Ansys installations, it
  chooses by default the highest installed Ansys version on your
  system).

  I recommend configuring GNU-Emacs to autoload APDL-Mode for certain
  file endings, especially the `.mac' suffix.

  #+begin_src elisp
    ;; Traditional APDL file suffixes
    (add-to-list 'auto-mode-alist '("\\.mac$" . apdl-mode))
    (add-to-list 'auto-mode-alist '("\\.ans$" . apdl-mode))
    ;; Workbench solver file suffixes
    (add-to-list 'auto-mode-alist '("\\.dat$" . apdl-mode))
    (add-to-list 'auto-mode-alist '("\\.inp\\'" . apdl-mode))
    ;; Ansys neutral geometry file suffix
    (add-to-list 'auto-mode-alist '("\\.anf$" . apdl-mode))
  #+end_src

  Please read [[file:apdl-config.org][apdl-config.org]], or the accompanying configuration file
  [[file:ansys-config.el][apdl-config.el]] for details and further configurations.
* Bugs and Problems
  Please write an email to the [[mailto:dieter@duenenhof-wilhelm.de][mode maintainer]].  Trigger a bug report
  form from the APDL menu or by calling the function
  `apdl-submit-bug-report'.  Even if you have not configured Emacs to
  send emails, please copy this template for the maintainer.

  You might also issue a bug report at APDL-Mode's [[https://github.com/dieter-wilhelm/apdl-mode/issues][issues site]].

  And you can leave comments and hints at the [[https://www.emacswiki.org/emacs/APDLMode][APDL-Mode page]] of the
  [[https://www.emacswiki.org][Emacs Wiki]].

* News
  APDL-Mode can now be installed from [[https://melpa.org/][Melpa]].

  For further news please have a look into the [[file:NEWS.org][NEWS]] file.
* Further Resources
** Emacs editor resources
   - Emacs [[http://emacs.stackexchange.com][Stackexchange]], the question and answer site.
   - [[http://www.emacswiki.org][EmacsWiki]], an encyclopedia for GNU-Emacs
** Other APDL editor resources
   - The Ansys [[https://catalog.ansys.com/product/5b3bc6857a2f9a5c90d32ddb/apdl-editor][APDL plug-in]] from the Ansys store, published in 2017
     (and not maintained since then?)
   - Simple APDL syntax highlighting extensions are available for
     various editors, gvim, nedit, ... to name a few, please have a
     look at [[https://ansys.net][Ansys.net]].
   - A commercial competitor of apdl-mode: The [[http://www.padtinc.com/pedal][Pedal]] script editor for
     Windows, project disbanded in 2015.
   - A free Windows [[http://apdl.de][APDL editor]], site not maintained since 2011
** Ansys and APDL resources
   - The online Ansys [[https://ansyshelp.ansys.com/][reference manuals]] (registration required) and
     the Ansys [[https://www.youtube.com/channel/UCdymxOTZSP8RzRgFT8kpYpA][online videos]] on YouTube
   - The [[http://www.ansys.com][Ansys homepage]] with the Ansys Portal and Learning Hub
   - Xansys, an [[http://www.xansys.org][Ansys online community]] (forum registration is necessary)
   - The [[http://www.padtinc.com/blog/the-focus/][PADT Focus]] site.
   - A general  Ansys repository [[http://www.ansys.net][Ansys.net]]
   - [[http://www.auc-ev.de/][AUC]], the Ansys User Club eV. in Germany
* License
  The GPL v3, the GNU Public license.  There are no costs and no usage
  restrictions even in commercial application, please read the [[file:LICENSE][LICENSE]]
  file
* Acknowledgements
  Acknowledgements to Tim Read and Geoff Foster for their ansys-mod.el
  from 1997 which triggered the idea in 2006 to start apdl-mode.

  Parts of APDL-Mode were base on octave-mod.el: Copyright (C) 1997
  Free Software Foundation, Inc.  Author: [[mailto:Kurt.Hornik@wu-wien.ac.at][Kurt Hornik]]
  Author: [[mailto:jwe@bevo.che.wisc.edu][John Eaton]]

* TODOs
  Please read the [[file:TODO.org][TODO]] file
-----

# The following is for Emacs
# local variables:
# word-wrap: t
# show-trailing-whitespace: t
# indicate-empty-lines: t
# time-stamp-active: t
# time-stamp-format: "%:y-%02m-%02d"
# end:

