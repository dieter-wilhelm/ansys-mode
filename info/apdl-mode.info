This is apdl-mode.info, produced by makeinfo version 6.5 from
apdl-mode.texi.

INFO-DIR-SECTION Development
START-INFO-DIR-ENTRY
* APDL-Mode: (apdl-mode). Major mode for the scripting language APDL.
END-INFO-DIR-ENTRY


File: apdl-mode.info,  Node: Top,  Next: Copying,  Up: (dir)

APDL-Mode’s Info Documentation
******************************

This manual is for APDL-Mode version 20.4.0 Time-stamp: "2020-03-28"

* Menu:

* Copying::
* Introduction::
* First Steps::
* Introductory Tutorial::
* Usage and Applications::
* Configuration and Customisation::
* APDL Reference::
* Installation and Development::
* Bugs and Problems::
* Further Resources::
* Acknowledgements::
* GNU Free Documentation License::
* Index::

— The Detailed Node Listing —

Usage and Applications

* Finding Help::
* Completion::
* Code Alignment::
* Auto-indentation::
* Closing of control blocks::
* Code navigation::
* Sophisticated highlighting::
* Variable Definitions::
* Abbreviation Facility::
* Outlining::
* Comment Handling::
* Code Template::
* Auto-insertion::
* Process Management::
* MAPDL Solver::

Finding Help

* Brief Command and Syntax Help::
* APDL Keyword Documentation::


Configuration and Customisation

* Conventions::
* Important Prerequisites::
* File suffixes::
* Auto insertion::
* Miscellaneous::
* Outlining: Outlining (1).
* Highlighting (Colourisation)::
* Installation dependent configurations::
* Ansys processes::

Important Prerequisites

* Ansys Installation path with version information::


File suffixes

* Macro files::
* WorkBench generated input files::
* The Ansys Neutral file format::


Highlighting (Colourisation)

* Dynamic highlighting::
* Decoration levels::


Ansys processes

* License server::
* Solver options::


APDL Reference

* WorkBench to APDL Translation::
* APDL Reference: APDL Reference (1).
* APDL-Mode Syntax Highlighting Reference::
* And the rest::

WorkBench to APDL Translation

* Contacts::
* Material Models::
* Boundary conditions::


APDL Reference

* Idiosyncrasies::
* File types::
* Defining parameters::
* Erasing variables from memory::
* Variable substitution::
* Expressions::
* Arrays::
* debugging::
* Multiple runs, probabilistic design: Multiple runs probabilistic design.
* Undocumented commands::


APDL-Mode Syntax Highlighting Reference

* Header::
* Highlighting APDL specials::
* Implied (or colon) looping::


Installation and Development

* Melpa::
* Manual installation::
* Development and source code installation::

Further Resources

* Ansys and APDL resources::
* Emacs editor resources::
* Other APDL editor resources::



File: apdl-mode.info,  Node: Copying,  Next: Introduction,  Prev: Top,  Up: Top

1 Copying
*********

Copyright © 2020 H.  Dieter Wilhelm

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with no Front-Cover Texts,
     and with no Back-Cover Texts.  A copy of the license is included in
     the section entitled *note GNU Free Documentation License::.


File: apdl-mode.info,  Node: Introduction,  Next: First Steps,  Prev: Copying,  Up: Top

2 Introduction
**************

APDL (Ansys Parametric Design Language
(https://de.wikipedia.org/wiki/Ansys_Parametric_Design_Language)) is the
solver scripting language of the mechanical FEA (Finite Element
Analysis) suite Ansys (http://www.ansys.com) (ANalysis SYStem,
registered TM).

   APDL-Mode (formerly Ansys-Mode) is - in conjunction with the
GNU-Emacs (https://www.gnu.org/software/emacs/) editor - an advanced
APDL environment with features like, pin-pointing the APDL reference
documentation, keyword completion, code templates, dedicated
highlighting, solver communication (GNU-Linux only), license reporting,
etc.  Over the years it has accumulated lots of features for writing and
debugging FEA complete models in APDL code.  Please convince yourself
with the APDL-Mode in-depth documentation.

   With the advent of the modern Ansys GUIs - like ‘WorkBench’ or
‘Discovery AIM’ - the usage of APDL as a wholesale modelling language
has diminished for non automated tasks.  But APDL is here to stay:
‘WorkBench’ and ‘AIM’ operate exclusively the Ansys solver with it!
They are producing and sending APDL input (.dat) files to the solver.
For a true understanding of the GUIs’ inner workings a study of their
APDL code is prerequisite!  Moreover, the GUIs are not supporting all
solver features.  So "Command (APDL)" snippets are used to enhance the
GUIs’ modelling capabilities.

   Nowadays I find APDL-Mode mostly useful for studying solver (.dat)
files which were created by WorkBench.  And, especially, for writing
WorkBench ‘Command’ snippets and inspecting longer snippets from other
sources.  Accessing swiftly the Ansys APDL reference documentation alone
is worth using APDL-Mode!

   When you "Export" (or "Import") such a WorkBench Command (APDL)
object it becomes associated with a file and is editable with a third
party editor.  When you have modified the file then the "File Status" in
Workbench changes and you can pull-in the updated content with the
"Refresh" button.


File: apdl-mode.info,  Node: First Steps,  Next: Introductory Tutorial,  Prev: Introduction,  Up: Top

3 First Steps
*************

Please type ‘M-x apdl’ which opens a buffer in APDL-Mode and you can
inspect the menu bar’s ‘APDL’ and ‘MAPDL’ entries.  For existing APDL
files please type ‘M-x apdl-mode’ if the mode is not activated already,
please see the following Configuration section for the pre-configured
file suffixes.

   For further guidance please select the APDL menu ‘APDL-Mode
Documentation’ (or type ‘C-c C-h’) and ‘Describe APDL-Mode’ (or type
‘C-h m’) for the list of its keybindings.  You might also check the
introductory APDL-Mode tutorial (doc/A-M_introductory_tutorial.org).

   APDL-Mode is tested with Ansys v193 and v201 under Windows 10, as
well as under Emacs-25 and 26 under GNU-Linux and Windows.


File: apdl-mode.info,  Node: Introductory Tutorial,  Next: Usage and Applications,  Prev: First Steps,  Up: Top

4 Introductory Tutorial
***********************

This introduction is targeted at users with no GNU-Emacs experience.

   Let’s assume you wrote some APDL command and want to check its
parameters.  In the menu bar use the "APDL" pull-down menu with the
entry "Show APDL Command Help".  The menu shows also the keyboard
shortcut for accessing this command ‘M-?’.  You need to know that
Gnu-Emacs is abreviating certain key sequences M-?  means typing the
control key <ALT> and the regular key ‘?’ simultaneously.

   GNU-Emacs provides also a third, so called interactive way to access
this and other functions.  By typing ‘M-x’ (the <ALT> key and the ‘x’
key at the same time) you are able to access the, so called,
‘minibuffer’ below the status line.  There you can input the desired
function by its name.  In above example the function
‘apdl-show-command-parameters’.  So type ‘M-x’ and in the minibuffer
type ‘apdl-start-ansys-help’ and starting it with the <RET> key.

   Typing long function names can be abbreviated with the
auto-completion feature.  Just enter the first few characters of a
command and then press the <TAB> key.  Another way of saving keystrokes
is to use the Gnu-Emacs’ fuzzy logic.  Instead of typing
‘apdl-show-command-parameter’ it is sufficient to type ‘a-s-c-p’ (and
run it with <RET>).

   You can always cancel minibuffer commands by typing C-g (the function
‘keyboard-quit’), i.  e.  pressing the <CTRL> key and the ‘g’ key at the
same time.

   All functions described in this help, regardless whether possessing a
keyboard shortcut or not, can be called in this interactive way or they
can be found in the APDL or Ansys menu.  (If you prefer to run Emacs in
a terminal window you might access the menu bar with <F10> key or
‘M-‘’.)

   You may have noticed the underlined names in this help.  These are
hyperlinks to further help, a mouse click or typing the <RET> key, when
the cursor is on them (you can skip to these links with the <TAB> key)
will display their respective help strings.

   In case something unintended happend to your code you are always able
to resort to the Emacs ‘undo’ functionality from the "Edit" menu or by
typing ‘C-x u’.


File: apdl-mode.info,  Node: Usage and Applications,  Next: Configuration and Customisation,  Prev: Introductory Tutorial,  Up: Top

5 Usage and Applications
************************

* Menu:

* Finding Help::
* Completion::
* Code Alignment::
* Auto-indentation::
* Closing of control blocks::
* Code navigation::
* Sophisticated highlighting::
* Variable Definitions::
* Abbreviation Facility::
* Outlining::
* Comment Handling::
* Code Template::
* Auto-insertion::
* Process Management::
* MAPDL Solver::


File: apdl-mode.info,  Node: Finding Help,  Next: Completion,  Up: Usage and Applications

5.1 Finding Help
================

In buffer display of short or browsing the complete Ansys documentation
in a browser.

* Menu:

* Brief Command and Syntax Help::
* APDL Keyword Documentation::


File: apdl-mode.info,  Node: Brief Command and Syntax Help,  Next: APDL Keyword Documentation,  Up: Finding Help

5.1.1 Brief Command and Syntax Help
-----------------------------------

Typing "M-?", the <CTRL> key simultaneously with the <c> key and then
<?>, the question mark (for the command ‘apdl-show-command-parameters’)
displays above a code line a brief description of the APDL command and
its syntax.  This command counts also the number of parameters and
visualises at which parameter position the cursor currently is.  The
command is looking for the next valid command near the cursor or when
using a prefix argument (‘C-u’ or ‘4’) it inquires an APDL command from
you.  The tooltip is switched off with an argument of zero (‘0’).


File: apdl-mode.info,  Node: APDL Keyword Documentation,  Prev: Brief Command and Syntax Help,  Up: Finding Help

5.1.2 APDL Keyword Documentation
--------------------------------

Browse the detailed APDL command, element and selected topics html help.

   typing "C-c C-b" will display the original Ansys help in your web
browser for an APDL command or element name (stating the element number
is sufficient) near the cursor or the code line’s first APDL command.
When using a prefix argument it inquires an keyword from you.  Keywords
beginning with a quotation mark ‘"’ describing general manual sections,
for example typing ‘"SHELLS"’ will call the collection of all shell
elements in the Ansys manual.


File: apdl-mode.info,  Node: Completion,  Next: Code Alignment,  Prev: Finding Help,  Up: Usage and Applications

5.2 Completion
==============

APDL keyword completion (commands, elements, get- and
parametric-functions)

   Type the first letter or letters of an APDL command, function or
element name and use the key binding "C-M-i" to let the function
‘apdl-complete-symbol’ do the (case sensitve) completion for you.
Depending on the case of your letter or letters to be completed, you
will get a downcased, upcased or capitalised completion.

   There are around 2000 APDL symbols available for completion.
Undocumented APDL commands and deprecated element types are also
completed.  The former are identified as such with a different
highlighting and in their ’command syntax help’.  Please see also the
variable ‘apdl-deprecated-element-alist’ it’s a list with the deprecated
elements and their respective replacements (for inspecting its content
please click on above hyperlink or type ‘C-hv’ and then type above
variable name).

   Doing this using the <TAB> key might save you some typing in
auto-completing the name.  When the characters before the cursor are not
unambiguous a completion list is shown, select the suitable word from
the list, either by navigation the cursor over the symbol and typing
<RET> or clicking with the left (or middle) mouse button is completing
the symbol.  Hitting the <SPACE> key removes the listing window.


File: apdl-mode.info,  Node: Code Alignment,  Next: Auto-indentation,  Prev: Completion,  Up: Usage and Applications

5.3 Code Alignment
==================

Formatting of variable definitions:

   Typing "C-c C-a" to call the function ‘apdl-align’ will align marked
sections or a paragraph of variable definitions like the following lines

   xyz=30.381 !this is a variable x = 0.4!this is another variable

   they will be aligned to

   xyz = 30.381 !this is a variable x = 0.4 !this is another variable


File: apdl-mode.info,  Node: Auto-indentation,  Next: Closing of control blocks,  Prev: Code Alignment,  Up: Usage and Applications

5.4 Auto-indentation
====================

of looping and conditional blocks.

   You can customise the indentation depth (APDL Block Offset), please
have a look for the entry ’Customise APDL Mode’ in the APDL-Mode menu.
The Emacs customisation facility optionally saves your choices
automatically in your .emacs file for later sessions.


File: apdl-mode.info,  Node: Closing of control blocks,  Next: Code navigation,  Prev: Auto-indentation,  Up: Usage and Applications

5.5 Closing of control blocks
=============================

(*do, *if, ...) with the insertion of appropriate end keywords

   Typing "C-c ]" for the function ‘apdl-close-block’ completes the
current APDL block with the insertion of a newline and an appropriate
end keyword.


File: apdl-mode.info,  Node: Code navigation,  Next: Sophisticated highlighting,  Prev: Closing of control blocks,  Up: Usage and Applications

5.6 Code navigation
===================

with extended keyboard shortcuts.  Code lines, number blocks, and
*DO,*IF, DOWHILE, *CREATE blocks etc.

   "M-n" – ‘apdl-next-code-line’ and "M-p" – ‘apdl-previous-code-line’
are going to the next/previous code line, skipping intermediate comments
and empty lines.

   The following block navigation commands are analogous to Emacs’
inbuilt list/sexp navigiation.

   "C-M-f" – ‘apdl-next-block-end’ "C-M-b"
–‘apdl-previous-block-start-and-conditional’ Above commands are skipping
to the next/previous block end/start keyword regardless where you are
already in the block structure.  "C-M-b" for the function
‘apdl-previous-block-start-and-conditional’ finds also *IF commands
without bases of the keyword ’THEN’; furthermore *CYCLE and *EXIT
looping controls.  These provide APDL constructs but represent no block
depth and therefore are not considered when applying the following
navigation commands.

   "C-M-n" – ‘apdl-skip-block-forward’ "C-M-p" –
‘apdl-skip-block-backwards’

   Are looking for and skipping over a complete block (at the current
block level, skipping possibly over deeper block structures).

   "C-M-u" – ‘apdl-up-block’ "C-M-d" – ‘apdl-down-block’

   Are searching for and skipping up/down a block structure from the
current block level.

   "C-c {" – ‘apdl-number-block-start’ "C-c }" – ‘apdl-number-block-end’

   Are searching for and skipping over ’pure’ number blocks (the nblock,
eblocks and cmblocks), these are common (and often quite large) in
WorkBench solver input files (*.inp, *.dat).

   You can also hide and unhide these - usually uninteresting - blocks
with M-x apdl-hide-number-blocks and M-x apdl-show-number-blocks
respectively or even a region of your (un)liking with M-x
apdl-hide-region.  In files with the suffix ‘.dat’ number blocks are
hidden by default.

   Moreover there are keyboard shortcuts with which you are able to
input pairs of corresponding characters, like ‘C-c %’ for ’%%’, the APDL
substitution operators.  The advantage is that the cursor is placed
between the pair and you might give a numerical argument to the call and
enclose already existing words with the pair, e.  q.  ‘C-1’ ‘C-c %’.
Please have a look for ‘insert-pair’ and see below in the Keybindings
section.


File: apdl-mode.info,  Node: Sophisticated highlighting,  Next: Variable Definitions,  Prev: Code navigation,  Up: Usage and Applications

5.7 Sophisticated highlighting
==============================

(optionally: User variables)

   The highlighting in the highest decoration level (please refer to
‘apdl-highlighting-level’) tries to follow the idiosyncratic Ansys
solver/interpreter logic as closely as possible.  For example: ’* ’, an
asterisk with following whitespace(s), is still a valid APDL comment
operator (although deprecated, see the Ansys manual for the *LET
command).

   The fontification distinguishes between APDL commands, undocumented
commands, parametric- and get-functions, elements and deprecated
elements.  In case of arbitrary characters after the command names, they
are still highlighted, since these characters are ignored by the Ansys
APDL intepreter.

   A macro is in the Ansys parlance some file with APDL code.  In this
sense it is used in the following documentation.  Additionally you can
create keyboard macros in Emacs to fasten your edinting, please see
‘kmacro-start-macro’.

   APDL macro variables beginning with an underscore might be APDL
reserved variables and therefore are higlighted in a warning face.
Another example is the percent sign, its highlighting reminds you that
the use of such a pair around a parameter name might force a parameter
substitution, e.  g.  with the assignment ’I=5’ and ’/com,TEST%I%’, the
/com command outputs TEST5.

   In the context of pairs of ’%’ characters, you can also input various
pairs with keyboard shortcuts, e.  g.  apostrophies for APDL character
parameters with ‘C-c’, please have a look which bindings are available
with "C-h b" (for ‘describe-bindings’).

   The format strings of *MSG, *MWRITE, *VWRITE and *VREAD are also
highlighted (in decoration levels 2, again please refer to
‘apdl-highlighting-level’).  Below is a summary of the C-format
descriptors which can be used for above commands.  (with these format
descriptors there are no parentheses needed in contrast to less general
fortran ones):

   %I Integer data %F Floating point format %G General numeric format %E
Scientific notation %C,%S Character strings (up to 128 characters) or
arrays; %/ Line break %% Single percent sign %wI w is the column width.
Integer is preceded by the number of blank characters needed to fill the
column.  %0wI Same as above except integer is padded by zeroes instead
of spaces.  %0w.pI Pad integer with zeros as necessary to obtain a
minimum of p digits.  %w.pF w is the column width.  Floating point
format to p decimal places.  %w.pG General format with p significant
digits.  %w.pE Scientific notation to p decimal places.  %wC, %wS
Character string with column width of w.  %-wC, %-wS Left justify
character string (right justify is default).  %wX Include w blank
characters.

   example code: *vwrite,B(1,1),B(2,1) %E%/%E

   Regarding the highlighting of user variables: The idea is to give a
visual hint whether variable names are spelled and used correctly
everywhere not only at the place of its definition.

   For this to occur ‘apdl-highlighting-level’ must be set to 2 (the
maximum, which is also the default), please have a look at the ‘=
customisation =’ section on how to change settings.

   Newly edited variable definitions are taken into account only when
the variable ‘apdl-dynamic-highlighting-flag’ is set (for very large
files this might slow Emacs and therefore the flag is only effective for
files ending in ’.mac’) or every times you activating the variable
display (with "C-c C-v", see below) in the maximum highlighting level
(2).


File: apdl-mode.info,  Node: Variable Definitions,  Next: Abbreviation Facility,  Prev: Sophisticated highlighting,  Up: Usage and Applications

5.8 Variable Definitions
========================

definition and component names (*GET, *DIM, *SET, = and DO, ...).

   Typing "C-c C-v" (for ‘apdl-display-variables’) shows all definitions
in your APDL file in a separate window.

   You might remove ’*APDL-variables*’ window with "C-x 4 k"
(‘apdl-delete-other-window’).

   When you place the cursor on the respective line number and type
‘C-u’ ‘M-g g’, where ‘C-u’ is a ’prefix’ argument to ‘M-g g’
(‘goto-line’)).  Emacs will then skip to the corresponding definition
line in the macro file.

   Additionally you are able with a prefix argument for "C-c C-v" to
receive the current value of your variables at the cursor position.  For
this functionality it is necessary to have a running Ansys process
(GNU-Linux systems only, please see below the chapter about the solver
communication).


File: apdl-mode.info,  Node: Abbreviation Facility,  Next: Outlining,  Prev: Variable Definitions,  Up: Usage and Applications

5.9 Abbreviation Facility
=========================

for block templates.

   E.g.  typing "‘do" (the backquote ’‘’ then ’do’) and the space key
<SPC> under APDL-Mode triggers an interactive code template which
inserts a *DO loop (‘apdl-do’).  "‘d" (then <SPC>) is a more immediate
version of it without requesting user input (‘ansys_do’).  You can see
all the predefined abbreviations with "‘?", i.  e.  a question mark ’?’
after the backquote ’‘’.  Alternatively you might use the menu entry or
the command ‘M-x ‘list-abbrevs’ <RET>’ to inspect all definitions which
Emacs knows.


File: apdl-mode.info,  Node: Outlining,  Next: Comment Handling,  Prev: Abbreviation Facility,  Up: Usage and Applications

5.10 Outlining
==============

(hiding and expanding) code sections.

   If you are using the pre-configured APDL-Mode then function
‘outline-minor-mode’ is switched on by default.

   With this mode you can hide certain sections of your code or navigate
to customisable outline headings.  Certain characters –by default ’!@’
(see the variable ‘ansys_outline_string’)– at the beginning of a line in
your code represent such headings.  ’!@@’ specifies a subheading and so
on (please call the function ‘apdl-skeleton-outline-template’ to insert
a skeleton of outline sections in your current file).  Check out the
Outline menu entries.

   In case outlining is not activate you might call Outline Minor Mode
with "M-x outline-minor-mode" or you can enable this mode for the
current session by ticking on the respective option in the menu or
permanently by setting ‘apdl-outline-minor-mode’ for the
‘apdl-mode-hook’ variable.  Please type "M-x apdl-customise-ansys <RET>"
or use the customisaton system from the menu: ->APDL ->Customise APDL
Mode.


File: apdl-mode.info,  Node: Comment Handling,  Next: Code Template,  Prev: Outlining,  Up: Usage and Applications

5.11 Comment Handling
=====================

commenting/un- of whole paragraphs.

   • "M-;" calls ‘comment-dwim’ (Do What I Mean ;-):

   In a code line: This command inserts comment char
‘apdl-indent-comment-string’ at ‘apdl-code-comment-column’ (if feasible,
i.  e.  the code line is not too long).  With a prefix argument: Kill
existing code comment.

   With an highlighted region: Commenting out (‘comment-region’) or
Uncommenting (‘uncomment-region’) that region.

   In an empty line: Inserts ’!!  ’ with the right indentation.

   • "C-M-j" (or "M-j", calls ‘indent-new-comment-line’).

   Breaks a code comment and inserts a single exclamation mark ’!’
(‘apdl-comment-char’) at column ‘apdl-code-comment-column’ (if
possible).

   In comment lines ’!!  ’ with two comment characters
(‘apdl-indent-comment-string’) breaks the comment and begins a the same
comment style at the the current indentation.

   In an empty line or a line without comment: Just inserts a new line.


File: apdl-mode.info,  Node: Code Template,  Next: Auto-insertion,  Prev: Comment Handling,  Up: Usage and Applications

5.12 Code Template
==================

insertion into an APDL file.

   You are able to preview the code templates with "C-c C-s" (for
‘apdl-display-skeleton’), while doing this, you might type <TAB> to
complete all available skeleton names.

   Check e.  g.  ‘apdl-skeleton-outline-template’, type "M-x
apdl-skeleton-outline-template <RET>" to insert this skeleton of APDL
code with outline headings.  Alternatively you can use the binding
"<CTRL> + u M-x apdl-skeleton-outline-template" for inserting templates
instead of previewing them.


File: apdl-mode.info,  Node: Auto-insertion,  Next: Process Management,  Prev: Code Template,  Up: Usage and Applications

5.13 Auto-insertion
===================

of code templates into new APDL files.

   Put the following section in your .emacs file, in case you want to to
include above skeleton (optionally) for every APDL file.

   (auto-insert-mode 1) (add-hook ’find-file-hook ’auto-insert) (setq
auto-insert-query t) (add-to-list ’auto-insert-alist ’(apdl-mode .
[apdl-skeleton-outline-template]))

   Please refere the configuration example ‘default.el’.


File: apdl-mode.info,  Node: Process Management,  Next: MAPDL Solver,  Prev: Auto-insertion,  Up: Usage and Applications

5.14 Process Management
=======================

   • APDL-Mode writes for you an APDL stop file in the current directory
     (the file name is compiled from the variable ‘apdl-job’ and the
     extension ’.abt’).  You can do this with "M-x
     apdl-write-abort-file" (‘apdl-write-abort-file’, you might
     previously use the Emacs command ’cd’ ("<ALT> + x M-x cd ") to
     change the current directory).  This stop file is halting a running
     calculation in an orderly, re-startable fashion.

   • You are able to view the Ansys APDL error file (a file consisting
     of the ‘apdl-job’ and the suffix ’.err’ in the current directory)
     with "C-c C-e" (this calls ‘apdl-display-error-file’).  The error
     file is opened in read only mode (see ‘read-only-mode’) and with
     the minor mode ‘auto-revert-tail-mode’, which scrolls the buffer
     automatically for keeping the current Ansys output visible.

   • You can start the Ansys Help Viewer directly from Emacs with "M-x
     apdl-start-ansys-help" (for ‘apdl-start-ansys-help’).

   • You might also start the APDL product launcher from Emacs under
     windows or the APDL interpeter under GNU-Linux with "C-c RET" (for
     ‘apdl-start-ansys’).

   • For displaying the available licenses (in another Emacs window)
     please use "C-c C-l" (for ‘apdl-license-status’).

   If your Ansys installation is not in the default locations APDL-Mode
might not be able to find its executables.  Or you want to use mixed
Ansys version installations then it is necessary to customise some
variables.  Either by calling the Emacs customisation facility
‘apdl-customise-ansys’ or from the menu bar -> ’APDL’ -> ’Customise APDL
Mode’ -> ’APDL-process’ and look there for the variables ’Ansys License
File’, ’Ansys Util Program’ and ’Ansys Help Program’ as well as ’Ansys
Help Program Parameters’) or set the variables directly in your .emacs
file.  Please have a look in the accompanying README.org and the
apdl-config.el customisation example.


File: apdl-mode.info,  Node: MAPDL Solver,  Prev: Process Management,  Up: Usage and Applications

5.15 MAPDL Solver
=================

control and communication (mainly restricted to GNU-Linux systems).

   With the APDL-Mode keyboard shortcut "C-c RET" (for the command
‘apdl-start-ansys’) you can start the APDL solver/interpreter under
GNU-Linux as an asynchronous process of Emacs.  After starting the run
you will see all interpreter output in a separate Emacs ’comint’
(command interpreter) window.  You are now able to interact with this
process in three ways, either by typing directly in the ’*APDL*’ window
or using "C-c C-c" (for ‘apdl-send-to-ansys’).  With the latter you can
send either the current code line or a whole selected region to the
running solver.  (A selected region means highlighted lines of code.  If
there is no running solver the function copies the code to the system
clipboard.)  And lastly you are able to send interactively APDL commands
with "C-c C-q" (‘apdl-query-apdl-command’) without switching to the
’*APDL*’ window.  If you would like to send your current code line in a
slightly modified form, then give a prefix argument to
‘apdl-query-apdl-command’ and the line will be the intial input for
sending it to the interpreter.

   Another very useful function in this context is "C-c C-u"
(‘apdl-copy-or-send-above’), which sends all code from the beginning up
to the current line to the solver/interpreter.  If there is no running
interpreter the function copies the code to the system clipboard.

   The last two commands (‘apdl-copy-or-send-above’ and
‘apdl-send-to-ansys’) are skipping to the next code line (if possible).
If you don’t need this behaviour supply any prefix argument to them and
the cursor will remain in the current line or in the last line of the
previously highlighted region.

   When you are not familiar with Emacs’ keybindings you probably want
to select your part of interest with dragging the mouse pointer while
pressing the first mouse button.  Often it is faster to select regions
with specialised keyboard commands.  For example "C-M-h"
(‘apdl-mark-block’) marks a whole block level, "M-x mark-paragraph
(‘mark-paragraph’) marks the current paragraph, the last command can not
only be used to initialise a new selection but also to extend an
existing one when repeting the command.  Please check the code
navigation commands which APDL-Mode provides (type "C-h b"
(‘describe-bindings’) to see which are available).

   In this mode you are able to start an Ansys graphics screen (without
the rest of graphical user interface) with M-x apdl-start-graphics
(function ‘apdl-start-graphics’).  Thus you are able to check and debug
your macro file content visually.  The graphics in this state is
changeable with APDL commands (like /view,1,1,1,1) but unfortunately not
through mouse interactions!  If you want to turn, zoom, etc., the model
it is best to call ‘apdl-start-pzr-box’ with C-c C-p and a dialog box
will pop up.  This is the usual Ansys Pan/Zoom/Rotate dialog for the
graphics screen.  But beware: Before you are able to send further
commands to the solver, you first have to close the PZR dialog box.
There is also a family of interactive commands to reposition the
graphics, like C-c C-+ (‘apdl-zoom-in’), replotting works with C-c C-r
(‘apdl-replot’) and a fit to the screen with C-c C-f (‘apdl-fit’), of
course, they are available from the menu as well.

   There is also a command for saving the data and ending the solver
run: ‘apdl-exit-ansys’ and a command for an emergency kill in case the
solver is not stoppable any longer in an orderly way: ‘apdl-kill-ansys’.

   As already indicated APDL-Mode has its own command for invoking the
Ansys Help Viewer "M-x apdl-start-ansys-help" because unfortunately the
following APDL commands do not work when the complete GUI system of
Ansys is not active.

   /ui,help !is it not working in Ansys non-GUI modes help, COMMAND !is
also not working in Ansys non-GUI modes

   So you are not able start the Help Viewer for a *specific* APDL
command but must search within the Ansys Help Viewer or better use the
much faster "C-c C-b".


File: apdl-mode.info,  Node: Configuration and Customisation,  Next: APDL Reference,  Prev: Usage and Applications,  Up: Top

6 Configuration and Customisation
*********************************

Most functionality of APDL-Mode is working without additional
configurations.  APDL-Mode is intelligent enough to figure out Ansys
installation dependent paths.  For regular Ansys installations, it
chooses by default the highest installed Ansys version on your system.

   APDL-Mode configures GNU-Emacs to open all files with the suffixes
".mac", ".dat" and ".inp" under apdl-mode.

   The customisations itself are written in ‘Emacs-Lisp’.  The comment
sign in this language is ‘;’ (one semi-colon ‘;’).

* Menu:

* Conventions::
* Important Prerequisites::
* File suffixes::
* Auto insertion::
* Miscellaneous::
* Outlining: Outlining (1).
* Highlighting (Colourisation)::
* Installation dependent configurations::
* Ansys processes::


File: apdl-mode.info,  Node: Conventions,  Next: Important Prerequisites,  Up: Configuration and Customisation

6.1 Conventions
===============

used in _apdl-config.el_ Textual hints in _apdl-config.el_ are indicated
with TWO semi-colons ‘;;’, please uncomment only the code lines with a
SINGLE comment sign and change them when appropriate.

   Please add the interesting code lines into your GNU-Emacs init file
or load this file in the init file with ‘(load-file
"PATH/apdl-config.el")’.


File: apdl-mode.info,  Node: Important Prerequisites,  Next: File suffixes,  Prev: Conventions,  Up: Configuration and Customisation

6.2 Important Prerequisites
===========================

* Menu:

* Ansys Installation path with version information::


File: apdl-mode.info,  Node: Ansys Installation path with version information,  Up: Important Prerequisites

6.2.1 Ansys Installation path with version information
------------------------------------------------------

If you have a non default installation APDL-Mode might not be able to
find the Ansys installation.  Please configure your installation path up
to and including the versioning number.

     (cond ((string= window-system "x")
             ;; This is an example of an installation directory on GNU-Linux
             (setq apdl-ansys-install-directory "/appl/ansys_inc/v201/"))
             ;; the default might look like "/ansys_inc/v201/"
            (t ;This an example of an installation directory on WINDOWS
             ;; Emacs is using here forward slashes as under Unix and not
             ;; the backslash "\"!
             (setq apdl-ansys-install-directory "D:/Ansys Inc/v201/"))
             ;; default: "C:/Program Files/Ansys Inc/v201/"

   If your Ansys installation differs completely from the standard Ansys
directory structure, or you want to use a mixed version system, then
please consult the section ‘INSTALLATION PATHS’ further below.


File: apdl-mode.info,  Node: File suffixes,  Next: Auto insertion,  Prev: Important Prerequisites,  Up: Configuration and Customisation

6.3 File suffixes
=================

for auto loading APDL-Mode Configure your file suffixes for which Ansys
mode is automatically called for.

* Menu:

* Macro files::
* WorkBench generated input files::
* The Ansys Neutral file format::


File: apdl-mode.info,  Node: Macro files,  Next: WorkBench generated input files,  Up: File suffixes

6.3.1 Macro files
-----------------

_.mac_ is the macro suffix of Ansys i.  e.  these macro files can be
called in the Ansys command prompt or APDL like a regular Ansys function
(without the suffix _.mac_).

   APDL-Mode has configured GNU-Emacs to open files with this suffix
under apdl-mode.

   With the following setting

     (add-to-list 'auto-mode-alist '("\\.ans$" . apdl-mode))

   files with the suffix _.ans_ will be opended in Emacs under
APDL-Mode.  Please check the _example.mac_ file in the _doc_ folder.


File: apdl-mode.info,  Node: WorkBench generated input files,  Next: The Ansys Neutral file format,  Prev: Macro files,  Up: File suffixes

6.3.2 WorkBench generated input files
-------------------------------------

_.dat_ and _.inp_ are WorkBench’s solver input file suffixes.  See the
file _example.dat_ in the _doc_ folder.

   APDL-Mode has configured GNU-Emacs to open files with these suffixes
under apdl-mode.


File: apdl-mode.info,  Node: The Ansys Neutral file format,  Prev: WorkBench generated input files,  Up: File suffixes

6.3.3 The Ansys Neutral file format
-----------------------------------

_.anf_ is the suffix for "Ansys Neutral" files which include mostly
gometric data but also some APDL snippets.  These files are used for
imports, see the file _example.anf_ in the _doc_ folder.

     (add-to-list 'auto-mode-alist '("\\.anf$" . apdl-mode))


File: apdl-mode.info,  Node: Auto insertion,  Next: Miscellaneous,  Prev: File suffixes,  Up: Configuration and Customisation

6.4 Auto insertion
==================

of code With the following code block Emacs inserts (after query) an
outline of a code structure when creating a new file with any suffix in
the ‘auto-mode-alist’ for ‘apdl-mode’, please see above section).
     (auto-insert-mode 1)         ; insert automatically templates
     (add-hook 'find-file-hook 'auto-insert) ; when opening new files
     (setq auto-insert-query t)   ; ask before insertion of an APDL
                                  ; template
     (add-to-list 'auto-insert-alist
        '(apdl-mode . [apdl-skeleton-outline-template])) ;which template
                                                         ;to insert


File: apdl-mode.info,  Node: Miscellaneous,  Next: Outlining (1),  Prev: Auto insertion,  Up: Configuration and Customisation

6.5 Miscellaneous
=================

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               ;; Miscellaneous
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

     (setq apdl-parameter-help-duration "2 min")
     (setq apdl-parameter-help-duration 30) ; 30 seconds

     ;; If you want to read the manual in GNU-Emacs' EWW browser.  This
     ;; might only work for locally installed help documents (1.7 GB
     ;; package v201) since v191 the online help is the default.

     ; (setq browse-url-browser-function 'eww-browse-url)



File: apdl-mode.info,  Node: Outlining (1),  Next: Highlighting (Colourisation),  Prev: Miscellaneous,  Up: Configuration and Customisation

6.6 Outlining
=============

Activating outline minor mode for selectively hiding and unhiding code
sections:

     (add-hook 'apdl-mode-hook 'apdl-outline-minor-mode) ;enable outlining


File: apdl-mode.info,  Node: Highlighting (Colourisation),  Next: Installation dependent configurations,  Prev: Outlining (1),  Up: Configuration and Customisation

6.7 Highlighting (Colourisation)
================================

* Menu:

* Dynamic highlighting::
* Decoration levels::


File: apdl-mode.info,  Node: Dynamic highlighting,  Next: Decoration levels,  Up: Highlighting (Colourisation)

6.7.1 Dynamic highlighting
--------------------------

of variables.  The following toggles a dynamics change of the
highlighting: While you are editing your new variable definitions
highlighted and the cursor position is shown in the parameter help
overlay

   Uncommenting the following might slow the editing of large .mac files
(but only when apdl-highlighting-level is set to 2, see below).
     (setq apdl-dynamic-highlighting-flag nil)
     ; (setq apdl-dynamic-highlighting-flag t) ;default: t



File: apdl-mode.info,  Node: Decoration levels,  Prev: Dynamic highlighting,  Up: Highlighting (Colourisation)

6.7.2 Decoration levels
-----------------------

Decoration levels 0,1,2 are available.  User variable highlighting is
only in level 2 available (statical, if above flag is not set), the
current default is 2

     (setq apdl-highlighting-level 1) ; default: 2


File: apdl-mode.info,  Node: Installation dependent configurations,  Next: Ansys processes,  Prev: Highlighting (Colourisation),  Up: Configuration and Customisation

6.8 Installation dependent configurations
=========================================

Further things you possibly have to configure if your Ansys installation
is completely differing from a default Ansys installation path, or if
you want to mix various Ansys versions:
     (setq apdl-ansys-help-program
         "/appl/ansys_inc/20.0.1/v201/commonfiles/help/HelpViewer/AnsysHelpViewer.exe")
         ;; normally it looks like this:
         ;; "/ansys_inc/v201/commonfiles/help/HelpViewer/AnsysHelpViewer.exe"
     ;; On WINDOWS: slash before /d: is unnecessary, but possible?
     (setq apdl-ansys-help-path "d:/Program Files/Ansys Inc/16.2.0/v201/commonfiles/help/en-us/help/")
     (setq apdl-ansys-help-path "/appl/ansys_inc/16.2.0/v201/commonfiles/help/en-us/help/")
     (setq apdl-ansys-launcher "/appl/ansys_inc/v201/ansys/bin/winx64/launcher")
     (setq apdl-ansys-wb "/appl/ansys_inc/v201/Framework/bin/Linux64/runwb2")
     (setq apdl-ansys-program "/appl/ansys_inc/19.3.0/ansys/bin/ansys195")
     (setq apdl-lmutil-program "/appl/ansys_inc/19.3.0/shared_files/licensing/linx64/lmutil")



File: apdl-mode.info,  Node: Ansys processes,  Prev: Installation dependent configurations,  Up: Configuration and Customisation

6.9 Ansys processes
===================

* Menu:

* License server::
* Solver options::


File: apdl-mode.info,  Node: License server,  Next: Solver options,  Up: Ansys processes

6.9.1 License server
--------------------

or license file.

   The more license servers are specified in ‘apdl-license-file’ the
longer it takes to get the license status.

   License server configuration: License servers (or license file name)
you have to specify also the port for (since Ansys V12.0).  On GNU-Linux
GNU-Linux: License servers are separated by colons (":"), on Windows
with semicolon ";".  1055 is the default port.

   the following variable APDL-Mode is checking the environment
variables AnsysLMD_LICENSE_FILE and MD_LICENSE_FILE.

     (setq apdl-license-file
       "1055@frlifl01.auto.contiwan.com:1055@frlifl02.auto.contiwan.com")

   since Ansys 12.0 there is an intermediate server for the
communication between flexlm and Ansys WorkBench, 2325 is here the
default port.  But the solver/interpreter is checking this server as
well!?

     (setq apdl-ansysli-servers
        "2325@frlifl01.auto.contiwan.com:2325@frlifl02.auto.contiwan.com")


File: apdl-mode.info,  Node: Solver options,  Prev: License server,  Up: Ansys processes

6.9.2 Solver options
--------------------

Number of cores for the run: 4 does not require HPC licenses
     (setq apdl-no-of-processors 8) ; default: 4

   Which license type to use for the solver
     (setq apdl-license "struct") ; default: "ansys"

   Ansys job name
     (setq apdl-job "harmonics1"); default: "file"


File: apdl-mode.info,  Node: APDL Reference,  Next: Installation and Development,  Prev: Configuration and Customisation,  Up: Top

7 APDL Reference
****************

* Menu:

* WorkBench to APDL Translation::
* APDL Reference: APDL Reference (1).
* APDL-Mode Syntax Highlighting Reference::
* And the rest::


File: apdl-mode.info,  Node: WorkBench to APDL Translation,  Next: APDL Reference (1),  Up: APDL Reference

7.1 WorkBench to APDL Translation
=================================

* Menu:

* Contacts::
* Material Models::
* Boundary conditions::


File: apdl-mode.info,  Node: Contacts,  Next: Material Models,  Up: WorkBench to APDL Translation

7.1.1 Contacts
--------------

* Menu:

* default 3D thermal contact::


File: apdl-mode.info,  Node: default 3D thermal contact,  Up: Contacts

7.1.1.1 default 3D thermal contact
..................................

          2333        6        5        6        0     6458     6457     6422     6421     8356     8306     8303     8304
     -1
     keyo,cid,8,2               ! auto create asymmetric contact (from Program Controlled setting)
     keyo,cid,10,2              ! adjust contact stiffness each NR iteration (from Program Controlled setting)
     keyo,cid,12,5              ! bonded always
     keyo,cid,2,0               ! augmented Lagrange (from Program Controlled setting)
     keyo,cid,4,0               ! on Gauss point (from Program Controlled setting)
     keyo,cid,9,1               ! ignore initial gaps/penetration
     keyo,cid,7,0               ! No Prediction
     rmod,tid,3,10.        ! FKN
     rmod,tid,5,0.        ! ICONT
     rmod,tid,6,0.        ! PINB
     rmod,tid,10,0.        ! CNOF
     rmod,tid,12,0.        ! FKT
     rmod,tid,36,31        ! WB DSID
     rmod,cid,3,10.        ! FKN
     rmod,cid,5,0.        ! ICONT
     rmod,cid,6,0.        ! PINB
     rmod,cid,10,0.        ! CNOF
     rmod,cid,12,0.        ! FKT
     rmod,cid,36,31        ! WB DSID
     *set,_maxkxx,605000.
     rmod,cid,14,_maxkxx/_ASMDIAG         ! TCC, Divide by Length since Traction Based
     rmod,tid,14,_maxkxx/_ASMDIAG      ! TCC, Divide by Length since Traction Based
     keyo,cid,1,2     ! Pure thermal contact
     /com,*********** Create Contact "Contact Region 2" ***********
     /com,            Real Constant Set For Above Contact Is 8 & 7
     *set,tid,8
     *set,cid,7
     r,tid
     r,cid
     et,tid,170
     et,cid,174
     eblock,10,,,94
     (15i9)
          2334        8        8        8        0     8439     8419     8443     8443     8793     8794     8443     8866


File: apdl-mode.info,  Node: Material Models,  Next: Boundary conditions,  Prev: Contacts,  Up: WorkBench to APDL Translation

7.1.2 Material Models
---------------------

* Menu:

* Plasticity::


File: apdl-mode.info,  Node: Plasticity,  Up: Material Models

7.1.2.1 Plasticity
..................

Multilinear Kinematic Hardening (MISO) Implementation:
     TB,PLAS,1,1,2,MISO
   This means that one must input the curve in plastic strains and true
stresses, *not* in the engineering quantities!


File: apdl-mode.info,  Node: Boundary conditions,  Prev: Material Models,  Up: WorkBench to APDL Translation

7.1.3 Boundary conditions
-------------------------

  1. forces

     it is possible to apply time and spatially varying loads either
     tabular or functional.  Example (depending on the coordinate sys.):
     =10*sin(x)
     moment
          scope: geometric selection, named selection, remote point
          contact pair: conta174, targe170 and pilot node similar to
          remote point pilot node is placed at the centre of the geom.
          curvature moment is applied around the reference coordinate
          system.  pinball radius (might) reduce(s) the memory intensive
          range of participating elements
     remote point
          contact pair with reference geometry and pilot node(point)
     remote force
          contacts with pilot node MPC formulation (flexible or rigid)
     pressure
          surf154, sf
     force
          surf154, sfe "line force": surf156, sfe
     bolt pretension
          prets179 (WB: select only ONE face for whole stud!)
     bearing load
          surf154,Elements selected in load direction and pressure load
          applied on projected area (WB: select ALL faces of a
          cylinder!)
     hydrostatic pressure
          surf154, sfgrad and sf

  2. Pressure

     Surface elements ‘surf154’ and surface loads on elements (‘sfe’)
            /com,*********** Define Pressure Vector Using Surface Effect Elements ***********
            local,12,0,0.,0.,0.,0.,0.,0.
            csys,0
            et,2,154
            eblock,10,,,10
            (15i9)
                   61        2        2        2       12      116      107       67       66      398      328      325      326
                   62        2        2        2       12      115      114      107      116      407      397      398      408
                   63        2        2        2       12      107      108       68       67      396      330      327      328
                   64        2        2        2       12      114      113      108      107      406      400      396      397
                   65        2        2        2       12      108      109       69       68      399      332      329      330
                   66        2        2        2       12      113      112      109      108      405      402      399      400
                   67        2        2        2       12      109      110       70       69      401      334      331      332
                   68        2        2        2       12      112      111      110      109      404      403      401      402
                   69        2        2        2       12      110      106       71       70      395      336      333      334
                   70        2        2        2       12      111      105      106      110      394      393      395      403
            -1
            esel,s,type,,2
            keyop,2,2,1                ! Apply load in local coordinate system
            keyop,2,11,2               ! Use real and not project area
            esel,all

            *DIM,_loadvari28x,TABLE,2,1,1,TIME,
            ! Time values
            _loadvari28x(1,0,1) = 0.
            _loadvari28x(2,0,1) = 1.
            ! Load values
            _loadvari28x(1,1,1) = 0.
            _loadvari28x(2,1,1) = -1.


            *DIM,_loadvari28y,TABLE,2,1,1,TIME,
            ! Time values
            _loadvari28y(1,0,1) = 0.
            _loadvari28y(2,0,1) = 1.
            ! Load values
            _loadvari28y(1,1,1) = 0.
            _loadvari28y(2,1,1) = -1.


            *DIM,_loadvari28z,TABLE,2,1,1,TIME,
            ! Time values
            _loadvari28z(1,0,1) = 0.
            _loadvari28z(2,0,1) = 1.
            ! Load values
            _loadvari28z(1,1,1) = 0.
            _loadvari28z(2,1,1) = 0.

            ...

          esel,s,type,,2
          nsle
          sfe,all,1,pres,1,%_loadvari28x%
          sfe,all,2,pres,1,%_loadvari28y%
          sfe,all,3,pres,1,%_loadvari28z%
          nsel,all
          esel,all


  3. displacements

     remote displacement
          x,y,z, displacments are for the pilot node NOT the entire
          area!
     simply supported
          hinge for beams (rotations are free)
     elastic support
          surf154, r(4)=foundation stiffness, default thickness=1,
          damping possible
     cylindrical support
          rotation with nmodif,node,x,y,z,thxy,...
     compression only support
          rigid surf2surf contacts

       1. Frictionless Support

          Fixing normal displacement with (‘d’), possibly modifying
          nodal coordinate system (‘nmodif’), turning into normal
          direction.
               /com,********* Frictionless Supports X *********
               CMBLOCK,_FRICSUX,NODE,       48
               (8i10)
                       61        62        63        64        65        66       115       116
                      117       118       119       120       121       122       123       124
                      ....
                      408       409       410       411       412       413       414       415
                      416       417       418       419       420       421       422       423
               cmsel,s,_FRICSUX
               d,all,ux,0
               nsel,all
               nsel,all
               /com,*********** Node Rotations ***********
               nmod,61,,,,-43.6672749853753,0.,0.
               ...


File: apdl-mode.info,  Node: APDL Reference (1),  Next: APDL-Mode Syntax Highlighting Reference,  Prev: WorkBench to APDL Translation,  Up: APDL Reference

7.2 APDL Reference
==================

* Menu:

* Idiosyncrasies::
* File types::
* Defining parameters::
* Erasing variables from memory::
* Variable substitution::
* Expressions::
* Arrays::
* debugging::
* Multiple runs, probabilistic design: Multiple runs probabilistic design.
* Undocumented commands::


File: apdl-mode.info,  Node: Idiosyncrasies,  Next: File types,  Up: APDL Reference (1)

7.2.1 Idiosyncrasies
--------------------

   • You can only store character variables of 8 characters, strings of
     32 characters and for *only* 248 characters you need to create a
     string array!
   • No function definitions <- write ‘command’ files (suffix: .mac), or
     call a macro (arbitrary suffix) with ‘*use’, something close is to
     fill a "table" arry, interpolating values and possible real
     indexing A(0.3).
   • you can get table array values with real index values but must use
     integers for assigning them the values, the same goes for *vplot:
     it needs the arry indices in integers and is, moreover, only
     capable to plot the columns and not their line values!
   • *vplot does only plot the columns of arrys, it is not possible to
     specify rows
   • No direct array values to file export in GUI mode <- write command
     file for *vwrite, or use a (lookup) table for this purpose
   • *vwread does not work with C format specifiers in contrast to
     *vwrite
   • Still (v15) no *round* function in sight, but someting like
     nint(max*1e3)/1e3 might do
   • One cannot easily get the variable value, either one must assign
     the variable to another one, or use the ‘*stat’ command
   • Operators > and <: 1 < 2 = 1; 2 < 1 = 1; 2 > 1 = 2 :TODO check
   • Inconsistent naming: /{x,y}range but /axlab,{x,y},
   • The /contour command does not work on device /show,PNG
   • DELETION OF ARRY parameters without warning only possible with an
     undocumented option: *del,Array,,nopr
   • *cfwrite does parameter substituion without %%: *cfwrite, X_points
     = NoN,*cfwrite, the same as X_points = %NoN%????
   • No direct operation on arrays like A=A*3, take a detour with *voper
     or *toper
   • Load symbol vectors /pbc,all,,1 in /prep7 are uniform in contrast
     to the more ralistic ones in /solu
   • You can send only a complete block structure to the solver


File: apdl-mode.info,  Node: File types,  Next: Defining parameters,  Prev: Idiosyncrasies,  Up: APDL Reference (1)

7.2.2 File types
----------------

the whole zoo is documented in the operations guide

No    Type                                                               Name       temp.   Remark                               Format
-------------------------------------------------------------------------------------------------------------------------------------------
1     abort                                                              .abt                                                    binary
2     graphics annotation commands                                       .ano       yes                                          ascii
3     neutral file format                                                .anf       no                                           ascii
4     animation                                                          .anim                                                   binary
5                                                                        .ans_log                                                ascii
6     input data copied from batch input file /batch                     .bat       yes
7     sparce solver                                                      .bcs       no      run time statistics                  ascii
8     interpolated body forces (bfint)                                   .bfin      no                                           ascii
9                                                                        .cdb
10    sparce solver                                                      .dsp               run time statistics                  ascii
11    interpolated DOF data (cbdof)                                      .cbdo      no                                           ascii
12    color map                                                          .cmap      no                                           ascii
13    default command file suffix (*cfopen, *cfwrite)                    .cmd       no                                           ascii
14    component mode synthesis                                           .cms       no                                           binary
15    nonlinear diagnostics file (nldiag)                                .cnd       no                                           ascii
16    pcg solver                                                         .pcs               run time statistics                  ascii
17    workbench solver input                                             .dat                                                    ascii
18    database                                                           .db                                                     binary
19    db backup                                                          .dbb                                                    binary
20    databas from vmseh failure in batch mode                           .dbe       no                                           binary
21    fortran solution information                                       .dbg       no                                           ascii
22    Do-loop nesting                                                    .do#       yes
23    scratch file modal analysis                                        .dscr      yes                                          binary
24                                                                       .D#
25    perfomance information sparse solver distributed                   .dsp       no                                           ascii
26    scratch file distributed sparse solver                             .dsp#                                                   binary
27    Superelement DOF solution from use pass                            .dsub      no                                           binary
28    Element definitions (EWRITE)                                       .elem      no                                           ascii
29    element matrices                                                   .emat                                                   binary
30    element saved data                                                 .esav
31    errors and warnings                                                .err                                                    ascii
32    distributed memory                                                 #.err
33    rotated element matrices                                           .erot      yes
34    Element saved data ESAV files created by nonlinear analyses        .esav      yes                                          binary
35    scratch file PCG Lanczos eigensolver                               .evc       yes                                          binary
36    scratch file PCG Lanczos eigensolver                               .evl       yes                                          binary
37                                                                       .ext
38                                                                       .exti
39    local results file distributed memory                              #.ext
40    stiffness-mass matrices                                            .full                                                   binary
41    Fatigue data [FTWRITE]                                             .fatg      no                                           ascii
42    neutral graphics file                                              .grph      no                                           ascii
43    Graphical solution tracking file                                   .gst       no                                           binary
44    IGES file from Ansys solid model data [IGESOUT]                    .iges      no                                           ascii
45    initial state                                                      .ist
46    Loading and bc of load steps (used for multiframe restart)         .ldhi                                                   ascii
47    Database command log file [LGWRITE]                                .lgw       no                                           ascii
48    scratch file for sparse solver                                     ???.ln#    yes
49    Load case file (where nn = load case number) [LCWRITE]             .l#        no                                           binary
50    Factorized stiffness matrix                                        .ln22      no                                           binary
51    Command input history                                              .log       no                                           ascii
52    lock file                                                          .lock      yes     prevent runs in the same directory   binary
53    scratch file mode superposition                                    .lscr      yes
54    scratch file substructure pass w/ more than 1 load vector          .lv        yes                                          binary
55    macro                                                              .mac                                                    ascii
56    Mapping data [HBMAT]                                               .mapping   no                                           ascii
57    Mapping data in Harwell-Boeing format [HBMAT]                      .matrix    no                                           asc/bin
58    Modal coordinates from harmonic or transient analysis              .mcf       no                                           ascii
59    modal element load vector                                          .mlv       no                                           binary
60    Nonlinear analysis convergence monitoring                          .mntr      no                                           ascii
61    modal analyses                                                     .mode                                                   binary
62    Material property definitions [MPWRITE]                            .mp                                                     ascii
63    Modal analysis frequencies and mode shapes                         .modesym   no                                           binary
64    mode-superposition transient (multiframe restart)                  .m#                                                     binary
65    Nonlinear diagnostics file tracking contact quantities [NLHIST]    .nlh       no                                           ascii
66    Node definitions [NWRITE]                                          .node      no                                           ascii
67    Stores Newton-Raphson iteration information [NLDIAG,NRRE,ON]       .nr        no                                           binary
68    old element .esav data from converged solution                     .osav
69    Solver messages                                                    .out       no                                           ascii
70    slave output file distributed memory                               #.out
71    database virtual memory                                            .page      yes     if database space unavailable
72    Parameter definitions [PARSAV]                                     .parm      no                                           ascii
73    Stores performance information when running the PCG solver         .pcs       no                                           ascii
74    FLOTRAN printout file                                              .pfl       no                                           ascii
75    plot file extension for electromagnetic trainsient                 .plt
76    Stores pivot information when running the sparse solver            .pvts      no                                           ascii
77    scratch file for PCG solver                                        .pc#       yes                                          binary
78    scratch file for PCG solver                                        .pda       yes                                          binary
79    scratch file for PCG solver                                        .pma       yes
80    Results file for initial contact state                             .rcn       no                                           binary
81    restart database                                                   .rdb       no
82    FLOTRAN residual file [FLDATA,OUTP]                                .rdf
83    Database from structural analyses after # times of rezoning        .rd#       no                                           binary
84    mode-superposition transient reduced displacements                 .rdsp      no                                           binary
85    mode-superposition harmonic reduced complex displacements          .rfrq      no                                           binary
86    flotran res.                                                       .rfl                                                    binary
87    magnetic res.                                                      .rmg                                                    binary
88    structural results                                                 .rst                                                    binary
89    combination of local results file in distributed memory            #.rst
90    linear perturbation results                                        .rstp
91    FLOTRAN "wall" results file                                        .rsw       no                                           ascii
92    FLOTRAN run data                                                   .run       no                                           ascii
93    thermal results                                                    .rth                                                    binary
94    Results file from structural analyses after nn times of rezoning   .rs#       no                                           binary
95    nonlinear static or full transient                                 .r#
96    load step No # [LSWRITE]                                           .s#                                                     ascii
97    scratch file for Jacobi Conjugate Gradient solver                  .scr       yes                                          binary
98    Superelement load vector data from generation pass                 .seld
99    scratch file for supernode solver                                  .snode#    yes                                          binary
100   Superelement name and number from use pass                         .sort
101   Status of an Ansys batch run                                       .stat      no                                           ascii
102   scratch file for substructure generation pass                      .sscr      yes                                          binary
103   substructure matrices                                              .sub
104   Hyperelastic material constants                                    .tb        no                                           ascii
105   Renamed DSUB File for input to substructure expansion pass         .usub      no                                           binary
106   FLOTRAN boundary condition data (Ansys to FLOTRAN)                 .xbc       no                                           ascii
107   FLOTRAN geometry data (Ansys to FLOTRAN)                           .xgm       no                                           ascii
108   FLOTRAN initial condition data (Ansys to FLOTRAN)                  .xic       no                                           ascii
109   restart                                                            .x#
110   Old (10/11) WorkBench database                                     .wbdb      no                                           binary
111                                                                      .dsdb
112   WB archive                                                         .wbpz                                                   binary
113   FE Modeler                                                         .fedb
114   Engineering Data                                                   .eddb
115   Engineering Data                                                   .xml
116   DesignXplorer                                                      .dxdb
117                                                                      .mechdat
118   Mesh input file                                                    .cmdb
119                                                                      .meshdat
120   WorkBench project database                                         .wbpj
121   design point                                                       .wbdp
122   WB material - AKA "engineering" data                               .engd
123   DesignModeler database                                             .agdb

   • .mac
   • .db
   • .dbb


File: apdl-mode.info,  Node: Defining parameters,  Next: Erasing variables from memory,  Prev: File types,  Up: APDL Reference (1)

7.2.3 Defining parameters
-------------------------

up to 5000

* Menu:

* Double, char38, char8, logical, TODO: Double char38 char8 logical TODO.
* Variable names::
* Character strings::


File: apdl-mode.info,  Node: Double char38 char8 logical TODO,  Next: Variable names,  Up: Defining parameters

7.2.3.1 Double, char38, char8, logical, TODO
............................................

in table only 8 chars?


File: apdl-mode.info,  Node: Variable names,  Next: Character strings,  Prev: Double char38 char8 logical TODO,  Up: Defining parameters

7.2.3.2 Variable names
......................

(called ‘parameter’ in the Ansys manual) All numeric values are stored
as double precision values.  Not defined variables are assigned a tiny
value near zero.  The interpreter is not case sensitve :TODO except in
strings?
   • Must begin with a letter or an underscore
     1ansys = 3                    !is not a valid variable name
     a1nsys = 3                    !a1nsys is a valid variable name
     A1NSys = 4                    !this is the same variable
     A1NSys = Temp                 !`Temp' is not defined
   The following text is the respective Ansys solver/interpreter output.
     BEGIN:
      1ansys = 3                    !is not a valid variable name
     PARAMETER 1Ansys =     3.000000000
     *** ERROR ***                           CP =       0.259   TIME= 18:06:41
     Invalid character in parameter name.
      The setting of parameter= 1Ansys is ignored.
     BEGIN:
      a1nsys = 3                    !a1nsys is a valid variable name
     PARAMETER A1NSYS =     3.000000000
     BEGIN:
      A1NSys = 4                    !this is the same variable
     PARAMETER A1NSYS =     4.000000000
     BEGIN:
      A1NSys = Temp                 !`Temp' is not defined
     *** WARNING ***                         CP =       0.260   TIME= 18:06:56
     Unknown parameter name= TEMP.  A value of 7.888609052E-31 will be used.
     PARAMETER A1NSYS =    0.7888609052E-30
     BEGIN:
   • Should not begin with an underscore This convention is used in
     nameing variables in Ansys supplied macros and the GUI.

     _ansys = 3   !`_ansys' represents a reserved variable in Ansys supplied macros
     _ = 3        ! a single underscore definition is valid
     X = _
     _ = 3 !the single underscore represents  also a `variable' in APDL
   • Variable names with a trailing underscore These are hidden from the
     ‘*status’ command output and can be deleted as a group with ‘*del’.
     ansys_ = 3              !this is a `hidden' variable from *status
     *status                 !does not show `ansys_'
            ,PRM_            !show variables with trailing underscore
     *del,,PRM_              !delete all variables with trailing underscore
      BEGIN:
     ansys_ = 3
      PARAMETER Ansys_ =     3.000000000
      BEGIN:
      *status
      ABBREVIATION STATUS-
       ABBREV    STRING
       SAVE_DB   SAVE
       RESUM_DB  RESUME
       QUIT      Fnc_/EXIT
       POWRGRPH  Fnc_/GRAPHICS

      PARAMETER STATUS-           (      5 PARAMETERS DEFINED)
                       (INCLUDING        4 INTERNAL PARAMETERS)

      NAME                              VALUE                        TYPE  DIMENSIONS
      X                                 3.00000000                    SCALAR
      BEGIN:
     ,PRM_
      PARAMETER STATUS- PRM_      (      5 PARAMETERS DEFINED)
                       (INCLUDING        4 INTERNAL PARAMETERS)

      NAME                              VALUE                        TYPE  DIMENSIONS
      Ansys_                            3.00000000                    SCALAR
      BEGIN:
   • Must contain only letters, numbers and underscores
     !! only letters, numbers and underscores are allowed
     a1n§sys = 3              !this is not a valid variable name
     a1n_sys = 3              !this is a valid variable name
   the Ansys interpreter output looks like this:
     BEGIN:
      a1n§sys = 3              !this is not a valid variable name
     *** ERROR ***                           CP =       0.256   TIME= 17:35:07
     Invalid character in parameter name.
      The setting of parameter= A1N§SYS is ignored.
     BEGIN:
      a1n_sys = 3              !this is a valid variable name
     PARAMETER A1N_SYS =     3.000000000
     BEGIN:
   • Must contain no more than 32 characters
     !! The following is not a valid variable name
     v23456789_123456789_123456789_123 = 3
     !! The following is a valid variable name
     v23456789_123456789_123456789_12  = 3
   • Local Variables
     Depth  =  ARG1 !ARG{1-9}, AR{10-19} = "*use" variables
     AR18 = AR19
     *stat,argx


File: apdl-mode.info,  Node: Character strings,  Prev: Variable names,  Up: Defining parameters

7.2.3.3 Character strings
.........................

Must not contain more than 32 characters
     ! character string variables are enclosed with `''
     Yc = '012345678901234567901234567890123' !not a character variable any more
     Symetry = 'yes'


File: apdl-mode.info,  Node: Erasing variables from memory,  Next: Variable substitution,  Prev: Defining parameters,  Up: APDL Reference (1)

7.2.4 Erasing variables from memory
-----------------------------------

     !! defining
     Scalar = 3               !the `=' assignment is a shorthand for `*set'
     *set,Scalar,4            !reassignment
     *set,Vector,1,2,3,4,5,6,7,8,9,10
     Vector = 0,1,2,3,4,5,6,7,8,9,10,11,12 !TODO:
     Vector = 4               !TODO:
     !! deleting
     Scalar =     !this is not a variable any more
     *set,Scalar               !alternative to `Scalar ='
     *del,all                 !delete all variables!
     *del,Vector   !TODO:


File: apdl-mode.info,  Node: Variable substitution,  Next: Expressions,  Prev: Erasing variables from memory,  Up: APDL Reference (1)

7.2.5 Variable substitution
---------------------------

with ‘%’

* Menu:

* Substitution of Numeric Variables::
* Substitution of Character Variables::
* Dynamic Substitution of Numeric or Character Variables::


File: apdl-mode.info,  Node: Substitution of Numeric Variables,  Next: Substitution of Character Variables,  Up: Variable substitution

7.2.5.1 Substitution of Numeric Variables
.........................................

In "string commands" like ‘/com’, where a string follows the command
name one can force the substitution of a parameter name to its value.
Other examples are
     Steel = 1
     /com,Material %Steel% is steel
     !! ATTENTION: in the following situation!
     /com,%Steel% does NOT substitute variable Steel
     /com, %Steel% does substitute variable Steel
     /com,Stuff like %Steel+1% returns 2


File: apdl-mode.info,  Node: Substitution of Character Variables,  Next: Dynamic Substitution of Numeric or Character Variables,  Prev: Substitution of Numeric Variables,  Up: Variable substitution

7.2.5.2 Substitution of Character Variables
...........................................

It is possible to substitute a command name
     R='RESUME'
     %R%,MODEL,DB
     !! string, message commands and comment behaviour && %$$% %% :bla: &&&

     /com, bla = %bla%
     igesin,'test','%iges%'
     /title,Nothing in %particular%
     !! in "string commands" are no code comments possible
     /com,beam3 %YES% ! this is *really not commented out!!!! &
     c*** *beam3 !otto *otto %neither% here !!!!!!! &
     /com, bearm laskf %otto% !%otto% we are here

   • In certain ‘string commands’
   ‘/title’ and ‘/com’ are string commands similar to ‘c***’
     right = 'wrong'
     /title, the value of right is  %right%
     /com, this is %right%: /com does expand parameters as well
   • Unfortunately here is no expansion possible
   neither with ‘c***’ nor with ‘/sys’
     right = 9
     c***,this is %right%: c*** allows no parameter expansion
     /sys,ls "*.mac" %otto% &
     /syp,ls, %otto% !this is not working, no substitution!
     I = 1
     otto = 'file00%I%.eps'
     /syp,ls, otto !this is working as intended


File: apdl-mode.info,  Node: Dynamic Substitution of Numeric or Character Variables,  Prev: Substitution of Character Variables,  Up: Variable substitution

7.2.5.3 Dynamic Substitution of Numeric or Character Variables
..............................................................

or forced substitution (deferred)
     Case = 'case 1'
     /title,This is  %Case%
                              !/stitle
                              !*ask
                              !/tlabel
                              !/an3d
                              !in tables TODO:
     aplot
     Case = 'case 2'
     !! not necessary to reissue /title, "This is case 2"
     !! will appear on subsequent plots
     aplot


File: apdl-mode.info,  Node: Expressions,  Next: Arrays,  Prev: Variable substitution,  Up: APDL Reference (1)

7.2.6 Expressions
-----------------

* Menu:

* Exponentiation Operator::
* Multiplication Expression::
* Operators::


File: apdl-mode.info,  Node: Exponentiation Operator,  Next: Multiplication Expression,  Up: Expressions

7.2.6.1 Exponentiation Operator
...............................

is ‘**’


File: apdl-mode.info,  Node: Multiplication Expression,  Next: Operators,  Prev: Exponentiation Operator,  Up: Expressions

7.2.6.2 Multiplication Expression
.................................

Beware of the oldstyle Ansys comment!
     var1 = sinh(cos(3 *5)) ! old style Ansys comment!!!!!
     var2 = sinh(cos(3*5))  ! this is valid code
     fini * comment
     otto = 3 * 4 comment, the value of otto = 3!
     !!


File: apdl-mode.info,  Node: Operators,  Prev: Multiplication Expression,  Up: Expressions

7.2.6.3 Operators
.................

‘<’ and ‘>’ :TODO
     otto = 1.82
     karl = 1.97
     margret =  otto < karl !margret = otto
     maria = karl < otto    !maria = otto
     *status,karl > otto


File: apdl-mode.info,  Node: Arrays,  Next: debugging,  Prev: Expressions,  Up: APDL Reference (1)

7.2.7 Arrays
------------

4 types: array, char of 8 characters, table and string 128 chars

* Menu:

* Specifiying array element values::
* APDL Math::


File: apdl-mode.info,  Node: Specifiying array element values,  Next: APDL Math,  Up: Arrays

7.2.7.1 Specifiying array element values
........................................


File: apdl-mode.info,  Node: APDL Math,  Prev: Specifiying array element values,  Up: Arrays

7.2.7.2 APDL Math
.................

APDL Math works in its own workspace independent of the APDL
environment!
     No = 100
     Pi = acos(-1)
     Dat = cos(0:2*Pi:(2*Pi/No))+ cos(0:2*Pi*10:(2*Pi/No))
     Dat = 0:2*Pi:2*Pi/No
     *vfun
     *vec,import,apdl,Dat
     *fft,Forw,Dat,OutDat,,,Full !what's the difference?
     *fft,    ,Dat,OutDat,,,Part !what's the difference?
     *export,OutDat,apdl,APDLOutDat


File: apdl-mode.info,  Node: debugging,  Next: Multiple runs probabilistic design,  Prev: Arrays,  Up: APDL Reference (1)

7.2.8 debugging
---------------

     debug                    !TODO: undocumented?


File: apdl-mode.info,  Node: Multiple runs probabilistic design,  Next: Undocumented commands,  Prev: debugging,  Up: APDL Reference (1)

7.2.9 Multiple runs, probabilistic design
-----------------------------------------

     PDEXE, Slab, MRUN, NFAIL, FOPT, Fname
     in V11: *mrun                    !TODO:


File: apdl-mode.info,  Node: Undocumented commands,  Prev: Multiple runs probabilistic design,  Up: APDL Reference (1)

7.2.10 Undocumented commands
----------------------------

     !undocumented commands are highlighted differently
     /xml                     !undocumented command /xml
     /xfrm                    !documented command   /xfrm


File: apdl-mode.info,  Node: APDL-Mode Syntax Highlighting Reference,  Next: And the rest,  Prev: APDL Reference (1),  Up: APDL Reference

7.3 APDL-Mode Syntax Highlighting Reference
===========================================

* Menu:

* Header::
* Highlighting APDL specials::
* Implied (or colon) looping::


File: apdl-mode.info,  Node: Header,  Next: Highlighting APDL specials,  Up: APDL-Mode Syntax Highlighting Reference

7.3.1 Header
------------

     !! ------------------------------
     !@ --- header ---
     !! ------------------------------
     !! Time-stamp: <2012-06-22 16:42:24 uidg1626>
     !! NOTE: This is APDL pseudo code, checking
     !!  APDL-Mode's highlighting capabilities and
     !!  certain aspects of the language
     !!  Please see further below.

     /units,mpa !indicate mm-t-s unit system
     !@ --- Preprocessing ---
     /prep7
     !@@ -- Elements --
     Steel = 1
     ID = Steel
     real = Steel
     et,ID,solid186 !3d, 20 node
     !@@ -- Material --
     mp,nuxy,Steel,0.3 ! Poisson No
     mp,ex,Steel,200000 ! Elastic modulus
     !@@ -- Modeling --
     block,0,1,0,1,0,1
     !@@ -- Meshing --
     vmesh,all
     !@@ -- BCs, Loads --
     nsel,s,loc,x,0
     d,all,all
     nsel,s,loc,x,1
     d,all,uy,-.1
     allsel
     save
     !@ --- Solving ---
     /solu
     solve
     !@ --- Postprocessing --
     /post1
     /view,,1,1,1
     plnsol,u,sum,2
     /image,save,test !save XWindow Dump xwd (or bmp on Windows)
     /image,capture                 !TODO: what is this: file0001.xwd?
     /sys,convert test test.png
     /upwind                  !TODO: 2d-graphics library? dated?
     *fft                     !TODO: :-)

     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     !!  Please put the the cursor below the next paragraph of emacs lisp
     !!  code and type "C-x C-e" to change the setting of
     !!  `ansys-highlighting-level' and `ansys-dynamic-highlighting-flag'
     !!  change the level from 0 to 2 and toggle the flag from `t' to
     !!  `nil'.  Browse the file to check the differences.

     (progn
       (when
           (featurep 'ansys-mode)
         (unload-feature 'ansys-mode))
       (setq
        ansys-highlighting-level 2
        ansys-dynamic-highlighting-flag t)
       (load-file "ansys-mode.el")
       (ansys-mode))

   :TODO !!  —————————— /units,mpa !indicate mm-t-s unit system c
     !@@ -- Ignored characters and condensed input line ($ operator)
     finishThisNightmare $ /cle !/clear
     f $ fi $ fin $ fini $ finis  $ finish $ finisher


File: apdl-mode.info,  Node: Highlighting APDL specials,  Next: Implied (or colon) looping,  Prev: Header,  Up: APDL-Mode Syntax Highlighting Reference

7.3.2 Highlighting APDL specials
--------------------------------

* Menu:

* Reserved words and _RETURN statements::
* _RETURN values of macros::
* Old style APDL comments::
* Ignored characters behind commands::
* The End Of File command::
* Ignored characters behind commands: Ignored characters behind commands (1).
* The End Of File command: The End Of File command (1).
* Current element types and deprecated elements::


File: apdl-mode.info,  Node: Reserved words and _RETURN statements,  Next: _RETURN values of macros,  Up: Highlighting APDL specials

7.3.2.1 Reserved words and _RETURN statements
.............................................

     !!
     N      =  _RETURN       !return value of certain commands
     Alpha2 =  +360./(2*N)
     Xc     =  !empty rhs clears variables


File: apdl-mode.info,  Node: _RETURN values of macros,  Next: Old style APDL comments,  Prev: Reserved words and _RETURN statements,  Up: Highlighting APDL specials

7.3.2.2 _RETURN values of macros
................................

     *return                  !TODO: what is this?
     *status,_RETURN          !0 normal
                              !1 note
                              !2 warning
                              !3 error
                              !4 fatal


File: apdl-mode.info,  Node: Old style APDL comments,  Next: Ignored characters behind commands,  Prev: _RETURN values of macros,  Up: Highlighting APDL specials

7.3.2.3 Old style APDL comments
...............................

     var1 = sinh(cos(3 *5)) ! old style Ansys comment!!!!!
     var2 = sinh(cos(3*5))  ! this is valid code
     fini * comment
     otto = 3 * 4 comment, the value of otto = 3!
     !!


File: apdl-mode.info,  Node: Ignored characters behind commands,  Next: The End Of File command,  Prev: Old style APDL comments,  Up: Highlighting APDL specials

7.3.2.4 Ignored characters behind commands
..........................................

     f $ fi $ fin $ fini $ finis  $ finish $ finisher
     !!


File: apdl-mode.info,  Node: The End Of File command,  Next: Ignored characters behind commands (1),  Prev: Ignored characters behind commands,  Up: Highlighting APDL specials

7.3.2.5 The End Of File command
...............................

     /eof --- WARNING: /eof crashes the Ansys GUI in interactive mode ---
     !!

     !@@ -- function names --
     Pi=acos(-1) $ True=1 $ False=0 $ Nn=3.1
     Alpha1 = rotx( 14.5) - 360./ (2*Nn)


File: apdl-mode.info,  Node: Ignored characters behind commands (1),  Next: The End Of File command (1),  Prev: The End Of File command,  Up: Highlighting APDL specials

7.3.2.6 Ignored characters behind commands
..........................................

     f $ fi $ fin $ fini $ finis  $ finish $ finisher
     a $ al $ all $ alls $ allse $ allsel $ allselllllll
     rectngaaaaa,var1,_X2,var2,X2 ! 2d rectangle
     !!


File: apdl-mode.info,  Node: The End Of File command (1),  Next: Current element types and deprecated elements,  Prev: Ignored characters behind commands (1),  Up: Highlighting APDL specials

7.3.2.7 The End Of File command
...............................

       /eof --- WARNING: /eof crashes the Ansys GUI in interactive mode ---
       /exit,nosave           !default is save the model data
     !!


File: apdl-mode.info,  Node: Current element types and deprecated elements,  Prev: The End Of File command (1),  Up: Highlighting APDL specials

7.3.2.8 Current element types and deprecated elements
.....................................................

     !! A current element type:
     et,10,solid186
     !! deprecated element types:
     et,Steel,beam3 $ et,Alu,shell91
     !!
   Let’s change the element types to current ones!
     !! Complete the following element fragments to current ones!
     !!
     et,Steel,beam $ et,Alu,shell

   For example select the following elements
     et,Steel,beam188 $ et,Alu,shell28
   and you are getting a diffent element highlighting.

     !@@ -- default commands
     nsel,s,loc,y,0
         ,a,loc,y,1
         ,r,loc,x,0
     d,all,all


File: apdl-mode.info,  Node: Implied (or colon) looping,  Prev: Highlighting APDL specials,  Up: APDL-Mode Syntax Highlighting Reference

7.3.3 Implied (or colon) looping
--------------------------------

     !@@ ::: implicit : (colon) looping :::::
     !! (n1:n2:dn)
     lfillt,(1:2),(3:4),5
     !! one subscript per array
     bf,(1:10),temp,Tarray(1:10)
     b(1:5) = 10,20,30,40,50 !TODO: creates this an array?
     !! The *get command and get functions are allowed
     *get,Fx(1:10),node,(1:10),f,fz !TODO:
     a(1:5) = nx(1:5)
     !! TODO:
     Fx(1:10) = (1:100:10)    !is this working? :-)
     !! alternative to *vfill
     *vfill,Fx,ramp,1,10

     !! looping
     *get,Dim
     *if,Dim,le,1,then
       *dim,Reaction,array,Ns,1
     *endif
     *do,I,1,Ns
       set,Ls,I
       fsum
       *get,Fx,fsum,,item,fx
       Reaction(I)=Fx
     *enddo
     !@@ -- multiline *msg formatting with the & operator
     *MSG,UI,Vcoilrms,THTAv,Icoilrms,THTAi,Papprnt,Pelec,PF,indctnc
     Coil RMS voltage, RMS current, apparent pwr, actual pwr, pwr factor: %/ &
     Steel = %G A (electrical angle = %G DEG) %/ &
     _Power factor: %G %/ &
     Inductance = %G %/ &
     VALUES ARE FOR ENTIRE COIL (NOT JUST THE MODELED SECTOR)


File: apdl-mode.info,  Node: And the rest,  Prev: APDL-Mode Syntax Highlighting Reference,  Up: APDL Reference

7.4 And the rest
================

*taxis only for 3 dimension?  table(0,1) = 3 is working as well

     !@@ --! multiline message format command this is tricky: use M-o M-o
     *MSG,UI,Vcoilrms,THTAv,Icoilrms,THTAi,Papprnt,Pelec,PF,indctnc
     Coil RMS voltage, RMS current, apparent pwr, actual pwr, pwr factor: %/ &
     Steel = %G A (electrical angle = %G DEG) %/ &
     _Power factor: %G %/ &
     Inductance = %G %/ &
     VALUES ARE FOR ENTIRE COIL (NOT JUST THE MODELED SECTOR)
     aldk this is not any longer in the *msg format construct
     /com this is not any longer in the *msg format construct

     *vwrite,B(1,1),B(2,1),%yes%
     alkd %D &
     %E%/%E
     !! commands which do not allow arguments
     /prep7 $ FINISH !$ means nothing behind
     /prep7 !still nothing behind
     /prep7 * old style comment, this is allowed
     /prep7 this is an error
     nsel,s,loc,x,1
     nsel = 3  !you CAN have variable names clashing with commands

     !@@ -- Goto branching --
     *go,:branch
     aselsalsdkfjaölsdkfjaölskdjf,all
     :branch

     !-----------------------------------------------------------------------
     ! mdlbl.mac
     ! Puts Modal Info on Plot
     !-----------------------------------------------------------------------
     /post1
     set,last
     *get,nmd,active,,set,sbst
     pfct= $ ffrq= $ adir=
     nsel,s,l

     *dim,pfct,,nmd,6
         ,
         ,ffrq,,nmd
         ,adir,char,nmd


     adir(1) = 'X','Y','Z','ROTX','ROTY','ROTZ'
     *stat,adir
     *do,i,1,nmd
       *get,ffrq(i),mode,i,freq
       *do,j,1,6
         *get,pfct(i,j),mode,i,pfact,,direc,adir(j)
       *enddo
     *enddo
     /annot,delete
     /plopt,info,0
     /plopt,minm,off
     /triad,off
     /erase
     iadd = arg1
     *if,iadd,eq,0,then
       iadd = 1
     *endif
     /tspe,15,1,1,0,0
     /TSPE, 15, 1.000,   1,   0,   0
     xx = 1.05
     yy = .9
     !  Change the window settings if you need different
     !  aspect ratios for your geometry
     /win,1,-1,1,.5,1
         ,2,-1,1,0,.5
         ,3,-1,1,-.5,0
         ,4,-1,1,-1,-.5
     !
     /win,2,off
     /win,3,off
     /win,4,off

     *get,vx,graph,1,view,x
     *get,vy,graph,1,view,y
     *get,vz,graph,1,view,z
     *get,va,graph,1,angle
     *get,vd,graph,1,dist
     *do,i,2,4
       /view,i,vx,vy,vz
       /dist,i,vd
       /angle,i,va
     *enddo

     *do,i,1,4
       ii = i - 1 + iadd
       set,1,ii
       plnsol,u,sum
       *if,i,eq,1,then
         /noerase
       *endif
       /win,i,off
       *if,i,ne,4,then
         /win,i+1,on
       *endif
     *enddo
     *do,i,1,4
       ii = i - 1 + iadd
       /TLAB, xx, yy  ,Mode: %ii%
       yy = yy - .05
       /TLAB, xx, yy,Freq: %ffrq(ii)%
       yy = yy - .05
       *do,j,1,6
         /TLAB, xx, yy  ,PF %adir(j)%: %pfct(ii,j)%
         yy = yy - .05
       *enddo
        yy = yy -.11
     *enddo
     /erase
     /annot,delete
     sz = .8
     xloc = 0
     yloc = 0

     *dim,data,,5
     data(1) = 12,15,28,10,32
     hsz = sz/2

     /pspec,0,1,1
     /poly,4,xloc-hsz,yloc-hsz,1.8*(xloc+hsz),yloc-hsz,
              1.8*(xloc+hsz),yloc+hsz,xloc-hsz,yloc+hsz

     x0 = xloc + hsz
     y0 = yloc + .7*hsz
     lof = .05

     *vscfun,dsum,sum,data(1)
     /LSPE, 15, 0, 1.000
     /TSPEC, 15, 0.700, 1, 0, 0
     ang1 = 0
     *do,i,1,5
       ang2 = ang1 + (360*data(i)/dsum)
       /PSPE, 2*i, 1, 1
       /PWED, xloc,yloc,sz*.4, ang1,ang2
       /poly,4,x0,y0,x0+lof,y0,x0+lof,y0+lof,x0,y0+lof
       pvl = 100*data(i)/dsum
       /tlab, x0+1.5*lof,y0, %pvl% %

       y0 = y0 - 1.5*lof
       ang1 = ang2
     *enddo
     /eof


File: apdl-mode.info,  Node: Installation and Development,  Next: Bugs and Problems,  Prev: APDL Reference,  Up: Top

8 Installation and Development
******************************

Copyright (C) 2006 - 2020 H.  Dieter Wilhelm, GPL V3

   Please install GNU-Emacs (https://www.gnu.org/software/emacs/) first,
you should install at least Emacs version 25.1.  (If you are new to this
editor please check the tutorial in its ‘Help’ menu, please really do it
;-)

* Menu:

* Melpa::
* Manual installation::
* Development and source code installation::


File: apdl-mode.info,  Node: Melpa,  Next: Manual installation,  Up: Installation and Development

8.1 Melpa
=========

APDL-Mode is now available on the GNU-Emacs packages archive Melpa
(https://melpa.org/).

   file:https://melpa.org/packages/apdl-mode-badge.svg
(https://melpa.org/#/apdl-mode)
file:https://stable.melpa.org/packages/apdl-mode-badge.svg
(https://stable.melpa.org/#/apdl-mode)

   Please add
     (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)

   to your initialisation file.  Then type: ‘M-x list-packages’, find
‘apdl-mode’, mark it with ‘i’ and install it with ‘x’.

   If you prefer the stable package archive instead of development
versions exchange above package source with
     (add-to-list 'package-archives
     '("melpa-stable" . "https://stable.melpa.org/packages/") t)


File: apdl-mode.info,  Node: Manual installation,  Next: Development and source code installation,  Prev: Melpa,  Up: Installation and Development

8.2 Manual installation
=======================

If you are behind a corporate firewall and you are not able to install
APDL-Mode from Emacs’ package menu, you can download and install
APDL-Mode manually:

   • Download the latest APDL-Mode’s tar package from Melpa
     (https://melpa.org/#/apdl-mode) or - for a released package - from
     the Github
     (https://github.com/dieter-wilhelm/apdl-mode/releases/tag/20.1.0)
     release page.
   • Install the package within Emacs: Please type ‘M-x
     package-install-file <RET>’ and select your downloaded tar file.

   That’s it.

   *Hint:* If you are getting an error message "package.el is not yet
initialized", you are using Emacs’ packaging system for the very first
time.  It is necessary to initialise this machinery once, please type:
‘M-: (package-initialize) <RET>’ and then apply ‘M-x
package-install-file <RET>’ again.


File: apdl-mode.info,  Node: Development and source code installation,  Prev: Manual installation,  Up: Installation and Development

8.3 Development and source code installation
============================================

Please clone the APDL-Mode git archive in a directory of your choice:
     git clone https://github.com/dieter-wilhelm/apdl-mode.git
   or download the Github ZIP archive and add the following line
     (require 'apdl-mode)
   to your initialisation file (the source directory must be set in the
‘load-path’ variable as well).


File: apdl-mode.info,  Node: Bugs and Problems,  Next: Further Resources,  Prev: Installation and Development,  Up: Top

9 Bugs and Problems
*******************

Feedback is always welcome.  If you have issues while installing and
running this mode or simply would like to suggest some improvements you
have the following options:

  1. Write an email to the mode maintainer
     <dieter@duenenhof-wilhelm.de>.  Please trigger a bug report form
     from the APDL-Mode menu or by calling the function
     ‘apdl-submit-bug-report’.  Even if you have not configured Emacs to
     send emails, please copy the content of the mail template for the
     maintainer.

  2. You might also issue a bug report at APDL-Mode’s issues site
     (https://github.com/dieter-wilhelm/apdl-mode/issues)

  3. And you can leave comments and hints at the APDL-Mode page
     (https://www.emacswiki.org/emacs/APDLMode) of the Emacs Wiki
     (https://www.emacswiki.org).


File: apdl-mode.info,  Node: Further Resources,  Next: Acknowledgements,  Prev: Bugs and Problems,  Up: Top

10 Further Resources
********************

* Menu:

* Ansys and APDL resources::
* Emacs editor resources::
* Other APDL editor resources::


File: apdl-mode.info,  Node: Ansys and APDL resources,  Next: Emacs editor resources,  Up: Further Resources

10.1 Ansys and APDL resources
=============================

   • The online Ansys reference manuals (https://ansyshelp.ansys.com/)
     (registration required) and the Ansys online videos
     (https://www.youtube.com/channel/UCdymxOTZSP8RzRgFT8kpYpA) on
     YouTube
   • The Ansys homepage (http://www.ansys.com) with the Ansys Portal and
     Learning Hub
   • Xansys, an Ansys online community (http://www.xansys.org) (forum
     registration is necessary)
   • The PADT Focus (http://www.padtinc.com/blog/the-focus/) site.
   • A general Ansys repository Ansys.net (http://www.ansys.net)
   • AUC (http://www.auc-ev.de/), the Ansys User Club eV.  in Germany


File: apdl-mode.info,  Node: Emacs editor resources,  Next: Other APDL editor resources,  Prev: Ansys and APDL resources,  Up: Further Resources

10.2 Emacs editor resources
===========================

   • The guided Tour
     (https://www.gnu.org/software/emacs/tour/index.html) of GNU-Emacs
   • Emacs’ Stackexchange (http://emacs.stackexchange.com), the question
     and answer site for Emacs
   • EmacsWiki (http://www.emacswiki.org), an encyclopedia for
     everything Emacs related
   • The Emacs help <help-gnu-emacs@gnu.org> mailing list


File: apdl-mode.info,  Node: Other APDL editor resources,  Prev: Emacs editor resources,  Up: Further Resources

10.3 Other APDL editor resources
================================

   • Since Ansys 2020R1 the Command (APDL) worksheet acquired - finally
     - syntax highlighting and command completion
   • The Ansys APDL plug-in
     (https://catalog.ansys.com/product/5b3bc6857a2f9a5c90d32ddb/apdl-editor)
     from the Ansys store, published in 2017 (and not maintained since
     then?)
   • Simple APDL syntax highlighting extensions are available for
     various editors, gvim, nedit, ... to name a few, please have a look
     at Ansys.net (https://ansys.net)
   • A commercial competitor of apdl-mode: The Pedal
     (http://www.padtinc.com/pedal) script editor for Windows, project
     disbanded in 2015
   • A free Windows APDL editor (http://apdl.de), site not maintained
     since 2011


File: apdl-mode.info,  Node: Acknowledgements,  Next: GNU Free Documentation License,  Prev: Further Resources,  Up: Top

11 Acknowledgements
*******************

My acknowledgements to Tim Read and Geoff Foster for their ansys-mod.el
from 1997 which triggered the idea in 2006 to start APDL-Mode.

   Parts of APDL-Mode were based on octave-mod.el: Copyright (C) 1997
Free Software Foundation, Inc.  Authors: Kurt Hornik
<Kurt.Hornik@wu-wien.ac.at> and John Eaton <jwe@bevo.che.wisc.edu>.

   I received moreover support and feedback from many individuals, thank
you very much!


File: apdl-mode.info,  Node: GNU Free Documentation License,  Next: Index,  Prev: Acknowledgements,  Up: Top

Appendix A GNU Free Documentation License
*****************************************

                     GNU Free Documentation License
                      Version 1.3, 3 November 2008


      Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
          <https://fsf.org/>
      Everyone is permitted to copy and distribute verbatim copies
      of this license document, but changing it is not allowed.

     0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or noncommercially.
     Secondarily, this License preserves for the author and publisher a way
     to get credit for their work, while not being considered responsible
     for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.  It
     complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for free
     software, because free software needs free documentation: a free
     program should come with manuals providing the same freedoms that the
     software does.  But this License is not limited to software manuals;
     it can be used for any textual work, regardless of subject matter or
     whether it is published as a printed book.  We recommend this License
     principally for works whose purpose is instruction or reference.


     1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium, that
     contains a notice placed by the copyright holder saying it can be
     distributed under the terms of this License.  Such a notice grants a
     world-wide, royalty-free license, unlimited in duration, to use that
     work under the conditions stated herein.  The "Document", below,
     refers to any such manual or work.  Any member of the public is a
     licensee, and is addressed as "you".  You accept the license if you
     copy, modify or distribute the work in a way requiring permission
     under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section of
     the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could fall
     directly within that overall subject.  (Thus, if the Document is in
     part a textbook of mathematics, a Secondary Section may not explain
     any mathematics.)  The relationship could be a matter of historical
     connection with the subject or with related matters, or of legal,
     commercial, philosophical, ethical or political position regarding
     them.

     The "Invariant Sections" are certain Secondary Sections whose titles
     are designated, as being those of Invariant Sections, in the notice
     that says that the Document is released under this License.  If a
     section does not fit the above definition of Secondary then it is not
     allowed to be designated as Invariant.  The Document may contain zero
     Invariant Sections.  If the Document does not identify any Invariant
     Sections then there are none.

     The "Cover Texts" are certain short passages of text that are listed,
     as Front-Cover Texts or Back-Cover Texts, in the notice that says that
     the Document is released under this License.  A Front-Cover Text may
     be at most 5 words, and a Back-Cover Text may be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed of
     pixels) generic paint programs or (for drawings) some widely available
     drawing editor, and that is suitable for input to text formatters or
     for automatic translation to a variety of formats suitable for input
     to text formatters.  A copy made in an otherwise Transparent file
     format whose markup, or absence of markup, has been arranged to thwart
     or discourage subsequent modification by readers is not Transparent.
     An image format is not Transparent if used for any substantial amount
     of text.  A copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format, SGML
     or XML using a publicly available DTD, and standard-conforming simple
     HTML, PostScript or PDF designed for human modification.  Examples of
     transparent image formats include PNG, XCF and JPG.  Opaque formats
     include proprietary formats that can be read and edited only by
     proprietary word processors, SGML or XML for which the DTD and/or
     processing tools are not generally available, and the
     machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the material
     this License requires to appear in the title page.  For works in
     formats which do not have any title page as such, "Title Page" means
     the text near the most prominent appearance of the work's title,
     preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies of
     the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document whose
     title either is precisely XYZ or contains XYZ in parentheses following
     text that translates XYZ in another language.  (Here XYZ stands for a
     specific section name mentioned below, such as "Acknowledgements",
     "Dedications", "Endorsements", or "History".)  To "Preserve the Title"
     of such a section when you modify the Document means that it remains a
     section "Entitled XYZ" according to this definition.

     The Document may include Warranty Disclaimers next to the notice which
     states that this License applies to the Document.  These Warranty
     Disclaimers are considered to be included by reference in this
     License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and has
     no effect on the meaning of this License.

     2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License applies
     to the Document are reproduced in all copies, and that you add no
     other conditions whatsoever to those of this License.  You may not use
     technical measures to obstruct or control the reading or further
     copying of the copies you make or distribute.  However, you may accept
     compensation in exchange for copies.  If you distribute a large enough
     number of copies you must also follow the conditions in section 3.

     You may also lend copies, under the same conditions stated above, and
     you may publicly display copies.


     3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly have
     printed covers) of the Document, numbering more than 100, and the
     Document's license notice requires Cover Texts, you must enclose the
     copies in covers that carry, clearly and legibly, all these Cover
     Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
     the back cover.  Both covers must also clearly and legibly identify
     you as the publisher of these copies.  The front cover must present
     the full title with all words of the title equally prominent and
     visible.  You may add other material on the covers in addition.
     Copying with changes limited to the covers, as long as they preserve
     the title of the Document and satisfy these conditions, can be treated
     as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto adjacent
     pages.

     If you publish or distribute Opaque copies of the Document numbering
     more than 100, you must either include a machine-readable Transparent
     copy along with each Opaque copy, or state in or with each Opaque copy
     a computer-network location from which the general network-using
     public has access to download using public-standard network protocols
     a complete Transparent copy of the Document, free of added material.
     If you use the latter option, you must take reasonably prudent steps,
     when you begin distribution of Opaque copies in quantity, to ensure
     that this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you distribute an
     Opaque copy (directly or through your agents or retailers) of that
     edition to the public.

     It is requested, but not required, that you contact the authors of the
     Document well before redistributing any large number of copies, to
     give them a chance to provide you with an updated version of the
     Document.


     4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document under
     the conditions of sections 2 and 3 above, provided that you release
     the Modified Version under precisely this License, with the Modified
     Version filling the role of the Document, thus licensing distribution
     and modification of the Modified Version to whoever possesses a copy
     of it.  In addition, you must do these things in the Modified Version:

     A. Use in the Title Page (and on the covers, if any) a title distinct
        from that of the Document, and from those of previous versions
        (which should, if there were any, be listed in the History section
        of the Document).  You may use the same title as a previous version
        if the original publisher of that version gives permission.
     B. List on the Title Page, as authors, one or more persons or entities
        responsible for authorship of the modifications in the Modified
        Version, together with at least five of the principal authors of the
        Document (all of its principal authors, if it has fewer than five),
        unless they release you from this requirement.
     C. State on the Title page the name of the publisher of the
        Modified Version, as the publisher.
     D. Preserve all the copyright notices of the Document.
     E. Add an appropriate copyright notice for your modifications
        adjacent to the other copyright notices.
     F. Include, immediately after the copyright notices, a license notice
        giving the public permission to use the Modified Version under the
        terms of this License, in the form shown in the Addendum below.
     G. Preserve in that license notice the full lists of Invariant Sections
        and required Cover Texts given in the Document's license notice.
     H. Include an unaltered copy of this License.
     I. Preserve the section Entitled "History", Preserve its Title, and add
        to it an item stating at least the title, year, new authors, and
        publisher of the Modified Version as given on the Title Page.  If
        there is no section Entitled "History" in the Document, create one
        stating the title, year, authors, and publisher of the Document as
        given on its Title Page, then add an item describing the Modified
        Version as stated in the previous sentence.
     J. Preserve the network location, if any, given in the Document for
        public access to a Transparent copy of the Document, and likewise
        the network locations given in the Document for previous versions
        it was based on.  These may be placed in the "History" section.
        You may omit a network location for a work that was published at
        least four years before the Document itself, or if the original
        publisher of the version it refers to gives permission.
     K. For any section Entitled "Acknowledgements" or "Dedications",
        Preserve the Title of the section, and preserve in the section all
        the substance and tone of each of the contributor acknowledgements
        and/or dedications given therein.
     L. Preserve all the Invariant Sections of the Document,
        unaltered in their text and in their titles.  Section numbers
        or the equivalent are not considered part of the section titles.
     M. Delete any section Entitled "Endorsements".  Such a section
        may not be included in the Modified Version.
     N. Do not retitle any existing section to be Entitled "Endorsements"
        or to conflict in title with any Invariant Section.
     O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no material
     copied from the Document, you may at your option designate some or all
     of these sections as invariant.  To do this, add their titles to the
     list of Invariant Sections in the Modified Version's license notice.
     These titles must be distinct from any other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of a
     standard.

     You may add a passage of up to five words as a Front-Cover Text, and a
     passage of up to 25 words as a Back-Cover Text, to the end of the list
     of Cover Texts in the Modified Version.  Only one passage of
     Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document already
     includes a cover text for the same cover, previously added by you or
     by arrangement made by the same entity you are acting on behalf of,
     you may not add another; but you may replace the old one, on explicit
     permission from the previous publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this License
     give permission to use their names for publicity for or to assert or
     imply endorsement of any Modified Version.


     5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under this
     License, under the terms defined in section 4 above for modified
     versions, provided that you include in the combination all of the
     Invariant Sections of all of the original documents, unmodified, and
     list them all as Invariant Sections of your combined work in its
     license notice, and that you preserve all their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name but
     different contents, make the title of each such section unique by
     adding at the end of it, in parentheses, the name of the original
     author or publisher of that section if known, or else a unique number.
     Make the same adjustment to the section titles in the list of
     Invariant Sections in the license notice of the combined work.

     In the combination, you must combine any sections Entitled "History"
     in the various original documents, forming one section Entitled
     "History"; likewise combine any sections Entitled "Acknowledgements",
     and any sections Entitled "Dedications".  You must delete all sections
     Entitled "Endorsements".


     6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the rules
     of this License for verbatim copying of each of the documents in all
     other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert a
     copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.


     7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other separate
     and independent documents or works, in or on a volume of a storage or
     distribution medium, is called an "aggregate" if the copyright
     resulting from the compilation is not used to limit the legal rights
     of the compilation's users beyond what the individual works permit.
     When the Document is included in an aggregate, this License does not
     apply to the other works in the aggregate which are not themselves
     derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half of
     the entire aggregate, the Document's Cover Texts may be placed on
     covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic form.
     Otherwise they must appear on printed covers that bracket the whole
     aggregate.


     8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section 4.
     Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also include
     the original English version of this License and the original versions
     of those notices and disclaimers.  In case of a disagreement between
     the translation and the original version of this License or a notice
     or disclaimer, the original version will prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to Preserve
     its Title (section 1) will typically require changing the actual
     title.


     9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void, and
     will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your license
     from a particular copyright holder is reinstated (a) provisionally,
     unless and until the copyright holder explicitly and finally
     terminates your license, and (b) permanently, if the copyright holder
     fails to notify you of the violation by some reasonable means prior to
     60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from that
     copyright holder, and you cure the violation prior to 30 days after
     your receipt of the notice.

     Termination of your rights under this section does not terminate the
     licenses of parties who have received copies or rights from you under
     this License.  If your rights have been terminated and not permanently
     reinstated, receipt of a copy of some or all of the same material does
     not give you any rights to use it.


     10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of the
     GNU Free Documentation License from time to time.  Such new versions
     will be similar in spirit to the present version, but may differ in
     detail to address new problems or concerns.  See
     https://www.gnu.org/licenses/.

     Each version of the License is given a distinguishing version number.
     If the Document specifies that a particular numbered version of this
     License "or any later version" applies to it, you have the option of
     following the terms and conditions either of that specified version or
     of any later version that has been published (not as a draft) by the
     Free Software Foundation.  If the Document does not specify a version
     number of this License, you may choose any version ever published (not
     as a draft) by the Free Software Foundation.  If the Document
     specifies that a proxy can decide which future versions of this
     License can be used, that proxy's public statement of acceptance of a
     version permanently authorizes you to choose that version for the
     Document.

     11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.  A
     "Massive Multiauthor Collaboration" (or "MMC") contained in the site
     means any set of copyrightable works thus published on the MMC site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or in
     part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this License
     somewhere other than this MMC, and subsequently incorporated in whole or
     in part into the MMC, (1) had no cover texts or invariant sections, and
     (2) were thus incorporated prior to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the site
     under CC-BY-SA on the same site at any time before August 1, 2009,
     provided the MMC is eligible for relicensing.


     ADDENDUM: How to use this License for your documents

     To use this License in a document you have written, include a copy of
     the License in the document and put the following copyright and
     license notices just after the title page:

         Copyright (c)  YEAR  YOUR NAME.
         Permission is granted to copy, distribute and/or modify this document
         under the terms of the GNU Free Documentation License, Version 1.3
         or any later version published by the Free Software Foundation;
         with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
         A copy of the license is included in the section entitled "GNU
         Free Documentation License".

     If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
     replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with the
         Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.

     If you have Invariant Sections without Cover Texts, or some other
     combination of the three, merge those two alternatives to suit the
     situation.

     If your document contains nontrivial examples of program code, we
     recommend releasing these examples in parallel under your choice of
     free software license, such as the GNU General Public License,
     to permit their use in free software.


File: apdl-mode.info,  Node: Index,  Prev: GNU Free Documentation License,  Up: Top

B Index
*******

Emacs 26.3 (Org mode 9.3.6)


Tag Table:
Node: Top219
Node: Copying2609
Node: Introduction3167
Node: First Steps5280
Node: Introductory Tutorial6144
Node: Usage and Applications8512
Node: Finding Help9024
Node: Brief Command and Syntax Help9314
Node: APDL Keyword Documentation10077
Node: Completion10798
Node: Code Alignment12269
Node: Auto-indentation12782
Node: Closing of control blocks13260
Node: Code navigation13677
Node: Sophisticated highlighting16201
Node: Variable Definitions19906
Node: Abbreviation Facility20934
Node: Outlining21689
Node: Comment Handling22893
Node: Code Template24048
Node: Auto-insertion24721
Node: Process Management25301
Node: MAPDL Solver27522
Node: Configuration and Customisation31771
Node: Conventions32719
Node: Important Prerequisites33222
Node: Ansys Installation path with version information33478
Node: File suffixes34661
Node: Macro files35040
Node: WorkBench generated input files35666
Node: The Ansys Neutral file format36089
Node: Auto insertion36541
Node: Miscellaneous37353
Node: Outlining (1)38094
Node: Highlighting (Colourisation)38424
Node: Dynamic highlighting38715
Node: Decoration levels39333
Node: Installation dependent configurations39708
Node: Ansys processes40979
Node: License server41200
Node: Solver options42266
Node: APDL Reference42680
Node: WorkBench to APDL Translation42992
Node: Contacts43238
Node: default 3D thermal contact43411
Node: Material Models45256
Node: Plasticity45455
Node: Boundary conditions45758
Node: APDL Reference (1)51320
Node: Idiosyncrasies51787
Node: File types53848
Node: Defining parameters68930
Node: Double char38 char8 logical TODO69254
Node: Variable names69483
Node: Character strings73757
Node: Erasing variables from memory74109
Node: Variable substitution74795
Node: Substitution of Numeric Variables75150
Node: Substitution of Character Variables75778
Node: Dynamic Substitution of Numeric or Character Variables77133
Node: Expressions77842
Node: Exponentiation Operator78075
Node: Multiplication Expression78261
Node: Operators78681
Node: Arrays78984
Node: Specifiying array element values79240
Node: APDL Math79419
Node: debugging79932
Node: Multiple runs probabilistic design80142
Node: Undocumented commands80456
Node: APDL-Mode Syntax Highlighting Reference80809
Node: Header81122
Node: Highlighting APDL specials83406
Node: Reserved words and _RETURN statements83988
Node: _RETURN values of macros84359
Node: Old style APDL comments84843
Node: Ignored characters behind commands85260
Node: The End Of File command85574
Node: Ignored characters behind commands (1)86018
Node: The End Of File command (1)86446
Node: Current element types and deprecated elements86852
Node: Implied (or colon) looping87646
Node: And the rest88887
Node: Installation and Development92622
Node: Melpa93176
Node: Manual installation94041
Node: Development and source code installation95102
Node: Bugs and Problems95661
Node: Further Resources96622
Node: Ansys and APDL resources96874
Node: Emacs editor resources97663
Node: Other APDL editor resources98226
Node: Acknowledgements99140
Node: GNU Free Documentation License99722
Node: Index124739

End Tag Table


Local Variables:
coding: utf-8
End:
